/* 
 * Authorization API
 *
 * Authorization API
 *
 * OpenAPI spec version: 9.0.000.00.dev
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using RestSharp;
using Genesys.Authorization.Client;
using Genesys.Authorization.Model;

namespace Genesys.Authorization.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IClientAPIApi : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Register new client
        /// </summary>
        /// <remarks>
        /// Add new client registration
        /// </remarks>
        /// <exception cref="Genesys.Authorization.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization">OAuth 2.0 Bearer Token. Example: \&quot;Authorization: bearer a4b5da75-a584-4053-9227-0f0ab23ff06e\&quot; </param>
        /// <param name="details">details</param>
        /// <returns>Object</returns>
        Object AddClient (string authorization, BaseClientDetails details);

        /// <summary>
        /// Register new client
        /// </summary>
        /// <remarks>
        /// Add new client registration
        /// </remarks>
        /// <exception cref="Genesys.Authorization.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization">OAuth 2.0 Bearer Token. Example: \&quot;Authorization: bearer a4b5da75-a584-4053-9227-0f0ab23ff06e\&quot; </param>
        /// <param name="details">details</param>
        /// <returns>ApiResponse of Object</returns>
        ApiResponse<Object> AddClientWithHttpInfo (string authorization, BaseClientDetails details);
        /// <summary>
        /// Get client details
        /// </summary>
        /// <remarks>
        /// Get registered client&#39;s details
        /// </remarks>
        /// <exception cref="Genesys.Authorization.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization">OAuth 2.0 Bearer Token. Example: \&quot;Authorization: bearer a4b5da75-a584-4053-9227-0f0ab23ff06e\&quot; </param>
        /// <param name="id">id</param>
        /// <returns>Object</returns>
        Object GetClient (string authorization, string id);

        /// <summary>
        /// Get client details
        /// </summary>
        /// <remarks>
        /// Get registered client&#39;s details
        /// </remarks>
        /// <exception cref="Genesys.Authorization.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization">OAuth 2.0 Bearer Token. Example: \&quot;Authorization: bearer a4b5da75-a584-4053-9227-0f0ab23ff06e\&quot; </param>
        /// <param name="id">id</param>
        /// <returns>ApiResponse of Object</returns>
        ApiResponse<Object> GetClientWithHttpInfo (string authorization, string id);
        /// <summary>
        /// Get clients details
        /// </summary>
        /// <remarks>
        /// Get all registered client details
        /// </remarks>
        /// <exception cref="Genesys.Authorization.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization">OAuth 2.0 Bearer Token. Example: \&quot;Authorization: bearer a4b5da75-a584-4053-9227-0f0ab23ff06e\&quot; </param>
        /// <returns>List&lt;ClientDetails&gt;</returns>
        List<ClientDetails> GetClients (string authorization);

        /// <summary>
        /// Get clients details
        /// </summary>
        /// <remarks>
        /// Get all registered client details
        /// </remarks>
        /// <exception cref="Genesys.Authorization.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization">OAuth 2.0 Bearer Token. Example: \&quot;Authorization: bearer a4b5da75-a584-4053-9227-0f0ab23ff06e\&quot; </param>
        /// <returns>ApiResponse of List&lt;ClientDetails&gt;</returns>
        ApiResponse<List<ClientDetails>> GetClientsWithHttpInfo (string authorization);
        /// <summary>
        /// Delete registration
        /// </summary>
        /// <remarks>
        /// Delete client registration
        /// </remarks>
        /// <exception cref="Genesys.Authorization.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization">OAuth 2.0 Bearer Token. Example: \&quot;Authorization: bearer a4b5da75-a584-4053-9227-0f0ab23ff06e\&quot; </param>
        /// <param name="id">id</param>
        /// <returns>Object</returns>
        Object RemoveClient (string authorization, string id);

        /// <summary>
        /// Delete registration
        /// </summary>
        /// <remarks>
        /// Delete client registration
        /// </remarks>
        /// <exception cref="Genesys.Authorization.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization">OAuth 2.0 Bearer Token. Example: \&quot;Authorization: bearer a4b5da75-a584-4053-9227-0f0ab23ff06e\&quot; </param>
        /// <param name="id">id</param>
        /// <returns>ApiResponse of Object</returns>
        ApiResponse<Object> RemoveClientWithHttpInfo (string authorization, string id);
        /// <summary>
        /// Update client
        /// </summary>
        /// <remarks>
        /// Update client registration details
        /// </remarks>
        /// <exception cref="Genesys.Authorization.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization">OAuth 2.0 Bearer Token. Example: \&quot;Authorization: bearer a4b5da75-a584-4053-9227-0f0ab23ff06e\&quot; </param>
        /// <param name="id">id</param>
        /// <param name="details">details</param>
        /// <returns>Object</returns>
        Object UpdateClient (string authorization, string id, BaseClientDetails details);

        /// <summary>
        /// Update client
        /// </summary>
        /// <remarks>
        /// Update client registration details
        /// </remarks>
        /// <exception cref="Genesys.Authorization.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization">OAuth 2.0 Bearer Token. Example: \&quot;Authorization: bearer a4b5da75-a584-4053-9227-0f0ab23ff06e\&quot; </param>
        /// <param name="id">id</param>
        /// <param name="details">details</param>
        /// <returns>ApiResponse of Object</returns>
        ApiResponse<Object> UpdateClientWithHttpInfo (string authorization, string id, BaseClientDetails details);
        #endregion Synchronous Operations
        #region Asynchronous Operations
        /// <summary>
        /// Register new client
        /// </summary>
        /// <remarks>
        /// Add new client registration
        /// </remarks>
        /// <exception cref="Genesys.Authorization.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization">OAuth 2.0 Bearer Token. Example: \&quot;Authorization: bearer a4b5da75-a584-4053-9227-0f0ab23ff06e\&quot; </param>
        /// <param name="details">details</param>
        /// <returns>Task of Object</returns>
        System.Threading.Tasks.Task<Object> AddClientAsync (string authorization, BaseClientDetails details);

        /// <summary>
        /// Register new client
        /// </summary>
        /// <remarks>
        /// Add new client registration
        /// </remarks>
        /// <exception cref="Genesys.Authorization.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization">OAuth 2.0 Bearer Token. Example: \&quot;Authorization: bearer a4b5da75-a584-4053-9227-0f0ab23ff06e\&quot; </param>
        /// <param name="details">details</param>
        /// <returns>Task of ApiResponse (Object)</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> AddClientAsyncWithHttpInfo (string authorization, BaseClientDetails details);
        /// <summary>
        /// Get client details
        /// </summary>
        /// <remarks>
        /// Get registered client&#39;s details
        /// </remarks>
        /// <exception cref="Genesys.Authorization.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization">OAuth 2.0 Bearer Token. Example: \&quot;Authorization: bearer a4b5da75-a584-4053-9227-0f0ab23ff06e\&quot; </param>
        /// <param name="id">id</param>
        /// <returns>Task of Object</returns>
        System.Threading.Tasks.Task<Object> GetClientAsync (string authorization, string id);

        /// <summary>
        /// Get client details
        /// </summary>
        /// <remarks>
        /// Get registered client&#39;s details
        /// </remarks>
        /// <exception cref="Genesys.Authorization.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization">OAuth 2.0 Bearer Token. Example: \&quot;Authorization: bearer a4b5da75-a584-4053-9227-0f0ab23ff06e\&quot; </param>
        /// <param name="id">id</param>
        /// <returns>Task of ApiResponse (Object)</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> GetClientAsyncWithHttpInfo (string authorization, string id);
        /// <summary>
        /// Get clients details
        /// </summary>
        /// <remarks>
        /// Get all registered client details
        /// </remarks>
        /// <exception cref="Genesys.Authorization.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization">OAuth 2.0 Bearer Token. Example: \&quot;Authorization: bearer a4b5da75-a584-4053-9227-0f0ab23ff06e\&quot; </param>
        /// <returns>Task of List&lt;ClientDetails&gt;</returns>
        System.Threading.Tasks.Task<List<ClientDetails>> GetClientsAsync (string authorization);

        /// <summary>
        /// Get clients details
        /// </summary>
        /// <remarks>
        /// Get all registered client details
        /// </remarks>
        /// <exception cref="Genesys.Authorization.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization">OAuth 2.0 Bearer Token. Example: \&quot;Authorization: bearer a4b5da75-a584-4053-9227-0f0ab23ff06e\&quot; </param>
        /// <returns>Task of ApiResponse (List&lt;ClientDetails&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<ClientDetails>>> GetClientsAsyncWithHttpInfo (string authorization);
        /// <summary>
        /// Delete registration
        /// </summary>
        /// <remarks>
        /// Delete client registration
        /// </remarks>
        /// <exception cref="Genesys.Authorization.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization">OAuth 2.0 Bearer Token. Example: \&quot;Authorization: bearer a4b5da75-a584-4053-9227-0f0ab23ff06e\&quot; </param>
        /// <param name="id">id</param>
        /// <returns>Task of Object</returns>
        System.Threading.Tasks.Task<Object> RemoveClientAsync (string authorization, string id);

        /// <summary>
        /// Delete registration
        /// </summary>
        /// <remarks>
        /// Delete client registration
        /// </remarks>
        /// <exception cref="Genesys.Authorization.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization">OAuth 2.0 Bearer Token. Example: \&quot;Authorization: bearer a4b5da75-a584-4053-9227-0f0ab23ff06e\&quot; </param>
        /// <param name="id">id</param>
        /// <returns>Task of ApiResponse (Object)</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> RemoveClientAsyncWithHttpInfo (string authorization, string id);
        /// <summary>
        /// Update client
        /// </summary>
        /// <remarks>
        /// Update client registration details
        /// </remarks>
        /// <exception cref="Genesys.Authorization.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization">OAuth 2.0 Bearer Token. Example: \&quot;Authorization: bearer a4b5da75-a584-4053-9227-0f0ab23ff06e\&quot; </param>
        /// <param name="id">id</param>
        /// <param name="details">details</param>
        /// <returns>Task of Object</returns>
        System.Threading.Tasks.Task<Object> UpdateClientAsync (string authorization, string id, BaseClientDetails details);

        /// <summary>
        /// Update client
        /// </summary>
        /// <remarks>
        /// Update client registration details
        /// </remarks>
        /// <exception cref="Genesys.Authorization.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization">OAuth 2.0 Bearer Token. Example: \&quot;Authorization: bearer a4b5da75-a584-4053-9227-0f0ab23ff06e\&quot; </param>
        /// <param name="id">id</param>
        /// <param name="details">details</param>
        /// <returns>Task of ApiResponse (Object)</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> UpdateClientAsyncWithHttpInfo (string authorization, string id, BaseClientDetails details);
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class ClientAPIApi : IClientAPIApi
    {
        private Genesys.Authorization.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="ClientAPIApi"/> class.
        /// </summary>
        /// <returns></returns>
        public ClientAPIApi(String basePath)
        {
            this.Configuration = new Configuration(new ApiClient(basePath));

            ExceptionFactory = Genesys.Authorization.Client.Configuration.DefaultExceptionFactory;

            // ensure API client has configuration ready
            if (Configuration.ApiClient.Configuration == null)
            {
                this.Configuration.ApiClient.Configuration = this.Configuration;
            }
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="ClientAPIApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public ClientAPIApi(Configuration configuration = null)
        {
            if (configuration == null) // use the default one in Configuration
                this.Configuration = Configuration.Default;
            else
                this.Configuration = configuration;

            ExceptionFactory = Genesys.Authorization.Client.Configuration.DefaultExceptionFactory;

            // ensure API client has configuration ready
            if (Configuration.ApiClient.Configuration == null)
            {
                this.Configuration.ApiClient.Configuration = this.Configuration;
            }
        }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.ApiClient.RestClient.BaseUrl.ToString();
        }

        /// <summary>
        /// Sets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        [Obsolete("SetBasePath is deprecated, please do 'Configuration.ApiClient = new ApiClient(\"http://new-path\")' instead.")]
        public void SetBasePath(String basePath)
        {
            // do nothing
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public Configuration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public Genesys.Authorization.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Gets the default header.
        /// </summary>
        /// <returns>Dictionary of HTTP header</returns>
        [Obsolete("DefaultHeader is deprecated, please use Configuration.DefaultHeader instead.")]
        public Dictionary<String, String> DefaultHeader()
        {
            return this.Configuration.DefaultHeader;
        }

        /// <summary>
        /// Add default header.
        /// </summary>
        /// <param name="key">Header field name.</param>
        /// <param name="value">Header field value.</param>
        /// <returns></returns>
        [Obsolete("AddDefaultHeader is deprecated, please use Configuration.AddDefaultHeader instead.")]
        public void AddDefaultHeader(string key, string value)
        {
            this.Configuration.AddDefaultHeader(key, value);
        }

        /// <summary>
        /// Register new client Add new client registration
        /// </summary>
        /// <exception cref="Genesys.Authorization.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization">OAuth 2.0 Bearer Token. Example: \&quot;Authorization: bearer a4b5da75-a584-4053-9227-0f0ab23ff06e\&quot; </param>
        /// <param name="details">details</param>
        /// <returns>Object</returns>
        public Object AddClient (string authorization, BaseClientDetails details)
        {
             ApiResponse<Object> localVarResponse = AddClientWithHttpInfo(authorization, details);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Register new client Add new client registration
        /// </summary>
        /// <exception cref="Genesys.Authorization.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization">OAuth 2.0 Bearer Token. Example: \&quot;Authorization: bearer a4b5da75-a584-4053-9227-0f0ab23ff06e\&quot; </param>
        /// <param name="details">details</param>
        /// <returns>ApiResponse of Object</returns>
        public ApiResponse< Object > AddClientWithHttpInfo (string authorization, BaseClientDetails details)
        {
            // verify the required parameter 'authorization' is set
            if (authorization == null)
                throw new ApiException(400, "Missing required parameter 'authorization' when calling ClientAPIApi->AddClient");
            // verify the required parameter 'details' is set
            if (details == null)
                throw new ApiException(400, "Missing required parameter 'details' when calling ClientAPIApi->AddClient");

            var localVarPath = "/auth/v3/clients";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (authorization != null) localVarHeaderParams.Add("Authorization", Configuration.ApiClient.ParameterToString(authorization)); // header parameter
            if (details != null && details.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(details); // http body (model) parameter
            }
            else
            {
                localVarPostBody = details; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AddClient", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Object) Configuration.ApiClient.Deserialize(localVarResponse, typeof(Object)));
        }

        /// <summary>
        /// Register new client Add new client registration
        /// </summary>
        /// <exception cref="Genesys.Authorization.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization">OAuth 2.0 Bearer Token. Example: \&quot;Authorization: bearer a4b5da75-a584-4053-9227-0f0ab23ff06e\&quot; </param>
        /// <param name="details">details</param>
        /// <returns>Task of Object</returns>
        public async System.Threading.Tasks.Task<Object> AddClientAsync (string authorization, BaseClientDetails details)
        {
             ApiResponse<Object> localVarResponse = await AddClientAsyncWithHttpInfo(authorization, details);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Register new client Add new client registration
        /// </summary>
        /// <exception cref="Genesys.Authorization.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization">OAuth 2.0 Bearer Token. Example: \&quot;Authorization: bearer a4b5da75-a584-4053-9227-0f0ab23ff06e\&quot; </param>
        /// <param name="details">details</param>
        /// <returns>Task of ApiResponse (Object)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> AddClientAsyncWithHttpInfo (string authorization, BaseClientDetails details)
        {
            // verify the required parameter 'authorization' is set
            if (authorization == null)
                throw new ApiException(400, "Missing required parameter 'authorization' when calling ClientAPIApi->AddClient");
            // verify the required parameter 'details' is set
            if (details == null)
                throw new ApiException(400, "Missing required parameter 'details' when calling ClientAPIApi->AddClient");

            var localVarPath = "/auth/v3/clients";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (authorization != null) localVarHeaderParams.Add("Authorization", Configuration.ApiClient.ParameterToString(authorization)); // header parameter
            if (details != null && details.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(details); // http body (model) parameter
            }
            else
            {
                localVarPostBody = details; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AddClient", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Object) Configuration.ApiClient.Deserialize(localVarResponse, typeof(Object)));
        }

        /// <summary>
        /// Get client details Get registered client&#39;s details
        /// </summary>
        /// <exception cref="Genesys.Authorization.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization">OAuth 2.0 Bearer Token. Example: \&quot;Authorization: bearer a4b5da75-a584-4053-9227-0f0ab23ff06e\&quot; </param>
        /// <param name="id">id</param>
        /// <returns>Object</returns>
        public Object GetClient (string authorization, string id)
        {
             ApiResponse<Object> localVarResponse = GetClientWithHttpInfo(authorization, id);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get client details Get registered client&#39;s details
        /// </summary>
        /// <exception cref="Genesys.Authorization.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization">OAuth 2.0 Bearer Token. Example: \&quot;Authorization: bearer a4b5da75-a584-4053-9227-0f0ab23ff06e\&quot; </param>
        /// <param name="id">id</param>
        /// <returns>ApiResponse of Object</returns>
        public ApiResponse< Object > GetClientWithHttpInfo (string authorization, string id)
        {
            // verify the required parameter 'authorization' is set
            if (authorization == null)
                throw new ApiException(400, "Missing required parameter 'authorization' when calling ClientAPIApi->GetClient");
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling ClientAPIApi->GetClient");

            var localVarPath = "/auth/v3/clients/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (authorization != null) localVarHeaderParams.Add("Authorization", Configuration.ApiClient.ParameterToString(authorization)); // header parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetClient", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Object) Configuration.ApiClient.Deserialize(localVarResponse, typeof(Object)));
        }

        /// <summary>
        /// Get client details Get registered client&#39;s details
        /// </summary>
        /// <exception cref="Genesys.Authorization.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization">OAuth 2.0 Bearer Token. Example: \&quot;Authorization: bearer a4b5da75-a584-4053-9227-0f0ab23ff06e\&quot; </param>
        /// <param name="id">id</param>
        /// <returns>Task of Object</returns>
        public async System.Threading.Tasks.Task<Object> GetClientAsync (string authorization, string id)
        {
             ApiResponse<Object> localVarResponse = await GetClientAsyncWithHttpInfo(authorization, id);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get client details Get registered client&#39;s details
        /// </summary>
        /// <exception cref="Genesys.Authorization.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization">OAuth 2.0 Bearer Token. Example: \&quot;Authorization: bearer a4b5da75-a584-4053-9227-0f0ab23ff06e\&quot; </param>
        /// <param name="id">id</param>
        /// <returns>Task of ApiResponse (Object)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> GetClientAsyncWithHttpInfo (string authorization, string id)
        {
            // verify the required parameter 'authorization' is set
            if (authorization == null)
                throw new ApiException(400, "Missing required parameter 'authorization' when calling ClientAPIApi->GetClient");
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling ClientAPIApi->GetClient");

            var localVarPath = "/auth/v3/clients/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (authorization != null) localVarHeaderParams.Add("Authorization", Configuration.ApiClient.ParameterToString(authorization)); // header parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetClient", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Object) Configuration.ApiClient.Deserialize(localVarResponse, typeof(Object)));
        }

        /// <summary>
        /// Get clients details Get all registered client details
        /// </summary>
        /// <exception cref="Genesys.Authorization.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization">OAuth 2.0 Bearer Token. Example: \&quot;Authorization: bearer a4b5da75-a584-4053-9227-0f0ab23ff06e\&quot; </param>
        /// <returns>List&lt;ClientDetails&gt;</returns>
        public List<ClientDetails> GetClients (string authorization)
        {
             ApiResponse<List<ClientDetails>> localVarResponse = GetClientsWithHttpInfo(authorization);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get clients details Get all registered client details
        /// </summary>
        /// <exception cref="Genesys.Authorization.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization">OAuth 2.0 Bearer Token. Example: \&quot;Authorization: bearer a4b5da75-a584-4053-9227-0f0ab23ff06e\&quot; </param>
        /// <returns>ApiResponse of List&lt;ClientDetails&gt;</returns>
        public ApiResponse< List<ClientDetails> > GetClientsWithHttpInfo (string authorization)
        {
            // verify the required parameter 'authorization' is set
            if (authorization == null)
                throw new ApiException(400, "Missing required parameter 'authorization' when calling ClientAPIApi->GetClients");

            var localVarPath = "/auth/v3/clients";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (authorization != null) localVarHeaderParams.Add("Authorization", Configuration.ApiClient.ParameterToString(authorization)); // header parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetClients", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<ClientDetails>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<ClientDetails>) Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<ClientDetails>)));
        }

        /// <summary>
        /// Get clients details Get all registered client details
        /// </summary>
        /// <exception cref="Genesys.Authorization.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization">OAuth 2.0 Bearer Token. Example: \&quot;Authorization: bearer a4b5da75-a584-4053-9227-0f0ab23ff06e\&quot; </param>
        /// <returns>Task of List&lt;ClientDetails&gt;</returns>
        public async System.Threading.Tasks.Task<List<ClientDetails>> GetClientsAsync (string authorization)
        {
             ApiResponse<List<ClientDetails>> localVarResponse = await GetClientsAsyncWithHttpInfo(authorization);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get clients details Get all registered client details
        /// </summary>
        /// <exception cref="Genesys.Authorization.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization">OAuth 2.0 Bearer Token. Example: \&quot;Authorization: bearer a4b5da75-a584-4053-9227-0f0ab23ff06e\&quot; </param>
        /// <returns>Task of ApiResponse (List&lt;ClientDetails&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<ClientDetails>>> GetClientsAsyncWithHttpInfo (string authorization)
        {
            // verify the required parameter 'authorization' is set
            if (authorization == null)
                throw new ApiException(400, "Missing required parameter 'authorization' when calling ClientAPIApi->GetClients");

            var localVarPath = "/auth/v3/clients";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (authorization != null) localVarHeaderParams.Add("Authorization", Configuration.ApiClient.ParameterToString(authorization)); // header parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetClients", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<ClientDetails>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<ClientDetails>) Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<ClientDetails>)));
        }

        /// <summary>
        /// Delete registration Delete client registration
        /// </summary>
        /// <exception cref="Genesys.Authorization.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization">OAuth 2.0 Bearer Token. Example: \&quot;Authorization: bearer a4b5da75-a584-4053-9227-0f0ab23ff06e\&quot; </param>
        /// <param name="id">id</param>
        /// <returns>Object</returns>
        public Object RemoveClient (string authorization, string id)
        {
             ApiResponse<Object> localVarResponse = RemoveClientWithHttpInfo(authorization, id);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Delete registration Delete client registration
        /// </summary>
        /// <exception cref="Genesys.Authorization.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization">OAuth 2.0 Bearer Token. Example: \&quot;Authorization: bearer a4b5da75-a584-4053-9227-0f0ab23ff06e\&quot; </param>
        /// <param name="id">id</param>
        /// <returns>ApiResponse of Object</returns>
        public ApiResponse< Object > RemoveClientWithHttpInfo (string authorization, string id)
        {
            // verify the required parameter 'authorization' is set
            if (authorization == null)
                throw new ApiException(400, "Missing required parameter 'authorization' when calling ClientAPIApi->RemoveClient");
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling ClientAPIApi->RemoveClient");

            var localVarPath = "/auth/v3/clients/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (authorization != null) localVarHeaderParams.Add("Authorization", Configuration.ApiClient.ParameterToString(authorization)); // header parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("RemoveClient", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Object) Configuration.ApiClient.Deserialize(localVarResponse, typeof(Object)));
        }

        /// <summary>
        /// Delete registration Delete client registration
        /// </summary>
        /// <exception cref="Genesys.Authorization.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization">OAuth 2.0 Bearer Token. Example: \&quot;Authorization: bearer a4b5da75-a584-4053-9227-0f0ab23ff06e\&quot; </param>
        /// <param name="id">id</param>
        /// <returns>Task of Object</returns>
        public async System.Threading.Tasks.Task<Object> RemoveClientAsync (string authorization, string id)
        {
             ApiResponse<Object> localVarResponse = await RemoveClientAsyncWithHttpInfo(authorization, id);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Delete registration Delete client registration
        /// </summary>
        /// <exception cref="Genesys.Authorization.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization">OAuth 2.0 Bearer Token. Example: \&quot;Authorization: bearer a4b5da75-a584-4053-9227-0f0ab23ff06e\&quot; </param>
        /// <param name="id">id</param>
        /// <returns>Task of ApiResponse (Object)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> RemoveClientAsyncWithHttpInfo (string authorization, string id)
        {
            // verify the required parameter 'authorization' is set
            if (authorization == null)
                throw new ApiException(400, "Missing required parameter 'authorization' when calling ClientAPIApi->RemoveClient");
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling ClientAPIApi->RemoveClient");

            var localVarPath = "/auth/v3/clients/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (authorization != null) localVarHeaderParams.Add("Authorization", Configuration.ApiClient.ParameterToString(authorization)); // header parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("RemoveClient", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Object) Configuration.ApiClient.Deserialize(localVarResponse, typeof(Object)));
        }

        /// <summary>
        /// Update client Update client registration details
        /// </summary>
        /// <exception cref="Genesys.Authorization.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization">OAuth 2.0 Bearer Token. Example: \&quot;Authorization: bearer a4b5da75-a584-4053-9227-0f0ab23ff06e\&quot; </param>
        /// <param name="id">id</param>
        /// <param name="details">details</param>
        /// <returns>Object</returns>
        public Object UpdateClient (string authorization, string id, BaseClientDetails details)
        {
             ApiResponse<Object> localVarResponse = UpdateClientWithHttpInfo(authorization, id, details);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Update client Update client registration details
        /// </summary>
        /// <exception cref="Genesys.Authorization.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization">OAuth 2.0 Bearer Token. Example: \&quot;Authorization: bearer a4b5da75-a584-4053-9227-0f0ab23ff06e\&quot; </param>
        /// <param name="id">id</param>
        /// <param name="details">details</param>
        /// <returns>ApiResponse of Object</returns>
        public ApiResponse< Object > UpdateClientWithHttpInfo (string authorization, string id, BaseClientDetails details)
        {
            // verify the required parameter 'authorization' is set
            if (authorization == null)
                throw new ApiException(400, "Missing required parameter 'authorization' when calling ClientAPIApi->UpdateClient");
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling ClientAPIApi->UpdateClient");
            // verify the required parameter 'details' is set
            if (details == null)
                throw new ApiException(400, "Missing required parameter 'details' when calling ClientAPIApi->UpdateClient");

            var localVarPath = "/auth/v3/clients/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (authorization != null) localVarHeaderParams.Add("Authorization", Configuration.ApiClient.ParameterToString(authorization)); // header parameter
            if (details != null && details.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(details); // http body (model) parameter
            }
            else
            {
                localVarPostBody = details; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UpdateClient", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Object) Configuration.ApiClient.Deserialize(localVarResponse, typeof(Object)));
        }

        /// <summary>
        /// Update client Update client registration details
        /// </summary>
        /// <exception cref="Genesys.Authorization.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization">OAuth 2.0 Bearer Token. Example: \&quot;Authorization: bearer a4b5da75-a584-4053-9227-0f0ab23ff06e\&quot; </param>
        /// <param name="id">id</param>
        /// <param name="details">details</param>
        /// <returns>Task of Object</returns>
        public async System.Threading.Tasks.Task<Object> UpdateClientAsync (string authorization, string id, BaseClientDetails details)
        {
             ApiResponse<Object> localVarResponse = await UpdateClientAsyncWithHttpInfo(authorization, id, details);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Update client Update client registration details
        /// </summary>
        /// <exception cref="Genesys.Authorization.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization">OAuth 2.0 Bearer Token. Example: \&quot;Authorization: bearer a4b5da75-a584-4053-9227-0f0ab23ff06e\&quot; </param>
        /// <param name="id">id</param>
        /// <param name="details">details</param>
        /// <returns>Task of ApiResponse (Object)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> UpdateClientAsyncWithHttpInfo (string authorization, string id, BaseClientDetails details)
        {
            // verify the required parameter 'authorization' is set
            if (authorization == null)
                throw new ApiException(400, "Missing required parameter 'authorization' when calling ClientAPIApi->UpdateClient");
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling ClientAPIApi->UpdateClient");
            // verify the required parameter 'details' is set
            if (details == null)
                throw new ApiException(400, "Missing required parameter 'details' when calling ClientAPIApi->UpdateClient");

            var localVarPath = "/auth/v3/clients/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // path parameter
            if (authorization != null) localVarHeaderParams.Add("Authorization", Configuration.ApiClient.ParameterToString(authorization)); // header parameter
            if (details != null && details.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(details); // http body (model) parameter
            }
            else
            {
                localVarPostBody = details; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UpdateClient", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Object) Configuration.ApiClient.Deserialize(localVarResponse, typeof(Object)));
        }

    }
}
