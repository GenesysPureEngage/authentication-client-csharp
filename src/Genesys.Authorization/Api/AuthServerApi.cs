/* 
 * Authorization API
 *
 * Authorization API
 *
 * OpenAPI spec version: 9.0.000.00.598
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using RestSharp;
using Genesys.Authorization.Client;
using Genesys.Authorization.Model;

namespace Genesys.Authorization.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IAuthServerApi : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Endpoint to perform authorization
        /// </summary>
        /// <remarks>
        /// See http://callistaenterprise.se/blogg/teknik/2015/04/27/building-microservices-part-3-secure-APIs-with-OAuth/, We support implicit_grant  Implicit grant example:   curl -v -u genesys\\\\agent:password -XGET &#39;http://localhost:8095/oauth/authorize?response_type&#x3D;token &amp; client_id&#x3D;external_api_client &amp; scope&#x3D;openid &amp; redirect_uri&#x3D;http://localhost/  In this sample external_api_client is client_id of client with allowed **implicit** grant typeplease note that Location header will contain URI which is constructed from redirect_uri and contains access_code or auth_code and other optional info, sample:  Location: http://localhost#access_token&#x3D;76c785dc-ae3d-4569-8c79-cf4f23d70a07&amp;token_type&#x3D;bearer&amp;expires_in&#x3D;43199
        /// </remarks>
        /// <exception cref="Genesys.Authorization.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="responseType">Response type</param>
        /// <param name="clientId">Client ID (id of application/service registered as client in IDP)</param>
        /// <param name="redirectUri">Redirect URI - will be the part of URL returned in &#39;Location&#39; header</param>
        /// <param name="authorization">Basic authorization. Example: &#39;Authorization: Basic Y3...MQ&#x3D;&#x3D;&#39; (optional)</param>
        /// <returns></returns>
        void Authorize (string responseType, string clientId, string redirectUri, string authorization = null);

        /// <summary>
        /// Endpoint to perform authorization
        /// </summary>
        /// <remarks>
        /// See http://callistaenterprise.se/blogg/teknik/2015/04/27/building-microservices-part-3-secure-APIs-with-OAuth/, We support implicit_grant  Implicit grant example:   curl -v -u genesys\\\\agent:password -XGET &#39;http://localhost:8095/oauth/authorize?response_type&#x3D;token &amp; client_id&#x3D;external_api_client &amp; scope&#x3D;openid &amp; redirect_uri&#x3D;http://localhost/  In this sample external_api_client is client_id of client with allowed **implicit** grant typeplease note that Location header will contain URI which is constructed from redirect_uri and contains access_code or auth_code and other optional info, sample:  Location: http://localhost#access_token&#x3D;76c785dc-ae3d-4569-8c79-cf4f23d70a07&amp;token_type&#x3D;bearer&amp;expires_in&#x3D;43199
        /// </remarks>
        /// <exception cref="Genesys.Authorization.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="responseType">Response type</param>
        /// <param name="clientId">Client ID (id of application/service registered as client in IDP)</param>
        /// <param name="redirectUri">Redirect URI - will be the part of URL returned in &#39;Location&#39; header</param>
        /// <param name="authorization">Basic authorization. Example: &#39;Authorization: Basic Y3...MQ&#x3D;&#x3D;&#39; (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> AuthorizeWithHttpInfo (string responseType, string clientId, string redirectUri, string authorization = null);
        /// <summary>
        /// Change user password
        /// </summary>
        /// <remarks>
        /// Change user password
        /// </remarks>
        /// <exception cref="Genesys.Authorization.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request">request</param>
        /// <returns>ApiResponse</returns>
        ApiResponse ChangePassword (ApiRequestChangePasswordOperation request);

        /// <summary>
        /// Change user password
        /// </summary>
        /// <remarks>
        /// Change user password
        /// </remarks>
        /// <exception cref="Genesys.Authorization.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request">request</param>
        /// <returns>ApiResponse of ApiResponse</returns>
        ApiResponse<ApiResponse> ChangePasswordWithHttpInfo (ApiRequestChangePasswordOperation request);
        /// <summary>
        /// Get domain and authentication method by user name or domain name
        /// </summary>
        /// <remarks>
        /// Get domain and authentication method by user name or domain name
        /// </remarks>
        /// <exception cref="Genesys.Authorization.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="lookupOperation">lookupOperation</param>
        /// <returns>ApiResponseDomainLookupResult</returns>
        ApiResponseDomainLookupResult DomainInfo (ApiRequestDomainLookupOperation lookupOperation);

        /// <summary>
        /// Get domain and authentication method by user name or domain name
        /// </summary>
        /// <remarks>
        /// Get domain and authentication method by user name or domain name
        /// </remarks>
        /// <exception cref="Genesys.Authorization.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="lookupOperation">lookupOperation</param>
        /// <returns>ApiResponse of ApiResponseDomainLookupResult</returns>
        ApiResponse<ApiResponseDomainLookupResult> DomainInfoWithHttpInfo (ApiRequestDomainLookupOperation lookupOperation);
        /// <summary>
        /// Get logged out clients information
        /// </summary>
        /// <remarks>
        /// Get logged out clients information
        /// </remarks>
        /// <exception cref="Genesys.Authorization.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Object</returns>
        Object GetLoggedout ();

        /// <summary>
        /// Get logged out clients information
        /// </summary>
        /// <remarks>
        /// Get logged out clients information
        /// </remarks>
        /// <exception cref="Genesys.Authorization.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of Object</returns>
        ApiResponse<Object> GetLoggedoutWithHttpInfo ();
        /// <summary>
        /// Get user principal by OAUTH token
        /// </summary>
        /// <remarks>
        /// This endpoint is called by oAuth2 clients to retrieve the principal by oAuth access token
        /// </remarks>
        /// <exception cref="Genesys.Authorization.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization">OAuth 2.0 Bearer Token. Example: \&quot;Authorization: bearer a4b5da75-a584-4053-9227-0f0ab23ff06e\&quot; </param>
        /// <param name="auth">auth (optional)</param>
        /// <returns>CloudUserDetails</returns>
        CloudUserDetails GetUserInfo (string authorization, Authentication auth = null);

        /// <summary>
        /// Get user principal by OAUTH token
        /// </summary>
        /// <remarks>
        /// This endpoint is called by oAuth2 clients to retrieve the principal by oAuth access token
        /// </remarks>
        /// <exception cref="Genesys.Authorization.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization">OAuth 2.0 Bearer Token. Example: \&quot;Authorization: bearer a4b5da75-a584-4053-9227-0f0ab23ff06e\&quot; </param>
        /// <param name="auth">auth (optional)</param>
        /// <returns>ApiResponse of CloudUserDetails</returns>
        ApiResponse<CloudUserDetails> GetUserInfoWithHttpInfo (string authorization, Authentication auth = null);
        /// <summary>
        /// Endpoint to perform form-based authentication
        /// </summary>
        /// <remarks>
        /// Endpoint to perform form-based authentication
        /// </remarks>
        /// <exception cref="Genesys.Authorization.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="username">User name - should be in the format of &#39;domain\\username&#39; (optional)</param>
        /// <param name="password">Password (optional)</param>
        /// <param name="domain">Domain - used for SAML login only (optional)</param>
        /// <param name="saml">SAML - flag indication saml login (optional)</param>
        /// <returns></returns>
        void Login (string username = null, string password = null, string domain = null, string saml = null);

        /// <summary>
        /// Endpoint to perform form-based authentication
        /// </summary>
        /// <remarks>
        /// Endpoint to perform form-based authentication
        /// </remarks>
        /// <exception cref="Genesys.Authorization.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="username">User name - should be in the format of &#39;domain\\username&#39; (optional)</param>
        /// <param name="password">Password (optional)</param>
        /// <param name="domain">Domain - used for SAML login only (optional)</param>
        /// <param name="saml">SAML - flag indication saml login (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> LoginWithHttpInfo (string username = null, string password = null, string domain = null, string saml = null);
        /// <summary>
        /// Logout user
        /// </summary>
        /// <remarks>
        /// This endpoint is called by oAuth2 clients to logout user
        /// </remarks>
        /// <exception cref="Genesys.Authorization.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization">OAuth 2.0 Bearer Token. Example: \&quot;Authorization: bearer a4b5da75-a584-4053-9227-0f0ab23ff06e\&quot; </param>
        /// <param name="global">If set all tokens for current user will be invalidated, otherwise only current token will be invalidated. (optional)</param>
        /// <returns>ApiResponse</returns>
        ApiResponse Logout (string authorization, bool? global = null);

        /// <summary>
        /// Logout user
        /// </summary>
        /// <remarks>
        /// This endpoint is called by oAuth2 clients to logout user
        /// </remarks>
        /// <exception cref="Genesys.Authorization.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization">OAuth 2.0 Bearer Token. Example: \&quot;Authorization: bearer a4b5da75-a584-4053-9227-0f0ab23ff06e\&quot; </param>
        /// <param name="global">If set all tokens for current user will be invalidated, otherwise only current token will be invalidated. (optional)</param>
        /// <returns>ApiResponse of ApiResponse</returns>
        ApiResponse<ApiResponse> LogoutWithHttpInfo (string authorization, bool? global = null);
        /// <summary>
        /// Endpoint to retrieve token
        /// </summary>
        /// <remarks>
        /// Can be called directly for Client Credential and Resource Owner Code flow.  Resource Owner example:   &#x60;curl client_name:client_secret@localhost:8095/oauth/token -d grant_type&#x3D;password -d client_id&#x3D;external_api_client-d scope&#x3D;openid -d username&#x3D;domain\\\\user -d password&#x3D;password&#x60;   Client credentials example:   &#x60;curl client_name:client_secret@localhost:8095/oauth/token -d grant_type&#x3D;client_credentials -d scope&#x3D;openid&#x60;
        /// </remarks>
        /// <exception cref="Genesys.Authorization.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>DefaultOAuth2AccessToken</returns>
        DefaultOAuth2AccessToken RetrieveToken ();

        /// <summary>
        /// Endpoint to retrieve token
        /// </summary>
        /// <remarks>
        /// Can be called directly for Client Credential and Resource Owner Code flow.  Resource Owner example:   &#x60;curl client_name:client_secret@localhost:8095/oauth/token -d grant_type&#x3D;password -d client_id&#x3D;external_api_client-d scope&#x3D;openid -d username&#x3D;domain\\\\user -d password&#x3D;password&#x60;   Client credentials example:   &#x60;curl client_name:client_secret@localhost:8095/oauth/token -d grant_type&#x3D;client_credentials -d scope&#x3D;openid&#x60;
        /// </remarks>
        /// <exception cref="Genesys.Authorization.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of DefaultOAuth2AccessToken</returns>
        ApiResponse<DefaultOAuth2AccessToken> RetrieveTokenWithHttpInfo ();
        #endregion Synchronous Operations
        #region Asynchronous Operations
        /// <summary>
        /// Endpoint to perform authorization
        /// </summary>
        /// <remarks>
        /// See http://callistaenterprise.se/blogg/teknik/2015/04/27/building-microservices-part-3-secure-APIs-with-OAuth/, We support implicit_grant  Implicit grant example:   curl -v -u genesys\\\\agent:password -XGET &#39;http://localhost:8095/oauth/authorize?response_type&#x3D;token &amp; client_id&#x3D;external_api_client &amp; scope&#x3D;openid &amp; redirect_uri&#x3D;http://localhost/  In this sample external_api_client is client_id of client with allowed **implicit** grant typeplease note that Location header will contain URI which is constructed from redirect_uri and contains access_code or auth_code and other optional info, sample:  Location: http://localhost#access_token&#x3D;76c785dc-ae3d-4569-8c79-cf4f23d70a07&amp;token_type&#x3D;bearer&amp;expires_in&#x3D;43199
        /// </remarks>
        /// <exception cref="Genesys.Authorization.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="responseType">Response type</param>
        /// <param name="clientId">Client ID (id of application/service registered as client in IDP)</param>
        /// <param name="redirectUri">Redirect URI - will be the part of URL returned in &#39;Location&#39; header</param>
        /// <param name="authorization">Basic authorization. Example: &#39;Authorization: Basic Y3...MQ&#x3D;&#x3D;&#39; (optional)</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task AuthorizeAsync (string responseType, string clientId, string redirectUri, string authorization = null);

        /// <summary>
        /// Endpoint to perform authorization
        /// </summary>
        /// <remarks>
        /// See http://callistaenterprise.se/blogg/teknik/2015/04/27/building-microservices-part-3-secure-APIs-with-OAuth/, We support implicit_grant  Implicit grant example:   curl -v -u genesys\\\\agent:password -XGET &#39;http://localhost:8095/oauth/authorize?response_type&#x3D;token &amp; client_id&#x3D;external_api_client &amp; scope&#x3D;openid &amp; redirect_uri&#x3D;http://localhost/  In this sample external_api_client is client_id of client with allowed **implicit** grant typeplease note that Location header will contain URI which is constructed from redirect_uri and contains access_code or auth_code and other optional info, sample:  Location: http://localhost#access_token&#x3D;76c785dc-ae3d-4569-8c79-cf4f23d70a07&amp;token_type&#x3D;bearer&amp;expires_in&#x3D;43199
        /// </remarks>
        /// <exception cref="Genesys.Authorization.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="responseType">Response type</param>
        /// <param name="clientId">Client ID (id of application/service registered as client in IDP)</param>
        /// <param name="redirectUri">Redirect URI - will be the part of URL returned in &#39;Location&#39; header</param>
        /// <param name="authorization">Basic authorization. Example: &#39;Authorization: Basic Y3...MQ&#x3D;&#x3D;&#39; (optional)</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> AuthorizeAsyncWithHttpInfo (string responseType, string clientId, string redirectUri, string authorization = null);
        /// <summary>
        /// Change user password
        /// </summary>
        /// <remarks>
        /// Change user password
        /// </remarks>
        /// <exception cref="Genesys.Authorization.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request">request</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse> ChangePasswordAsync (ApiRequestChangePasswordOperation request);

        /// <summary>
        /// Change user password
        /// </summary>
        /// <remarks>
        /// Change user password
        /// </remarks>
        /// <exception cref="Genesys.Authorization.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request">request</param>
        /// <returns>Task of ApiResponse (ApiResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<ApiResponse>> ChangePasswordAsyncWithHttpInfo (ApiRequestChangePasswordOperation request);
        /// <summary>
        /// Get domain and authentication method by user name or domain name
        /// </summary>
        /// <remarks>
        /// Get domain and authentication method by user name or domain name
        /// </remarks>
        /// <exception cref="Genesys.Authorization.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="lookupOperation">lookupOperation</param>
        /// <returns>Task of ApiResponseDomainLookupResult</returns>
        System.Threading.Tasks.Task<ApiResponseDomainLookupResult> DomainInfoAsync (ApiRequestDomainLookupOperation lookupOperation);

        /// <summary>
        /// Get domain and authentication method by user name or domain name
        /// </summary>
        /// <remarks>
        /// Get domain and authentication method by user name or domain name
        /// </remarks>
        /// <exception cref="Genesys.Authorization.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="lookupOperation">lookupOperation</param>
        /// <returns>Task of ApiResponse (ApiResponseDomainLookupResult)</returns>
        System.Threading.Tasks.Task<ApiResponse<ApiResponseDomainLookupResult>> DomainInfoAsyncWithHttpInfo (ApiRequestDomainLookupOperation lookupOperation);
        /// <summary>
        /// Get logged out clients information
        /// </summary>
        /// <remarks>
        /// Get logged out clients information
        /// </remarks>
        /// <exception cref="Genesys.Authorization.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of Object</returns>
        System.Threading.Tasks.Task<Object> GetLoggedoutAsync ();

        /// <summary>
        /// Get logged out clients information
        /// </summary>
        /// <remarks>
        /// Get logged out clients information
        /// </remarks>
        /// <exception cref="Genesys.Authorization.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (Object)</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> GetLoggedoutAsyncWithHttpInfo ();
        /// <summary>
        /// Get user principal by OAUTH token
        /// </summary>
        /// <remarks>
        /// This endpoint is called by oAuth2 clients to retrieve the principal by oAuth access token
        /// </remarks>
        /// <exception cref="Genesys.Authorization.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization">OAuth 2.0 Bearer Token. Example: \&quot;Authorization: bearer a4b5da75-a584-4053-9227-0f0ab23ff06e\&quot; </param>
        /// <param name="auth">auth (optional)</param>
        /// <returns>Task of CloudUserDetails</returns>
        System.Threading.Tasks.Task<CloudUserDetails> GetUserInfoAsync (string authorization, Authentication auth = null);

        /// <summary>
        /// Get user principal by OAUTH token
        /// </summary>
        /// <remarks>
        /// This endpoint is called by oAuth2 clients to retrieve the principal by oAuth access token
        /// </remarks>
        /// <exception cref="Genesys.Authorization.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization">OAuth 2.0 Bearer Token. Example: \&quot;Authorization: bearer a4b5da75-a584-4053-9227-0f0ab23ff06e\&quot; </param>
        /// <param name="auth">auth (optional)</param>
        /// <returns>Task of ApiResponse (CloudUserDetails)</returns>
        System.Threading.Tasks.Task<ApiResponse<CloudUserDetails>> GetUserInfoAsyncWithHttpInfo (string authorization, Authentication auth = null);
        /// <summary>
        /// Endpoint to perform form-based authentication
        /// </summary>
        /// <remarks>
        /// Endpoint to perform form-based authentication
        /// </remarks>
        /// <exception cref="Genesys.Authorization.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="username">User name - should be in the format of &#39;domain\\username&#39; (optional)</param>
        /// <param name="password">Password (optional)</param>
        /// <param name="domain">Domain - used for SAML login only (optional)</param>
        /// <param name="saml">SAML - flag indication saml login (optional)</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task LoginAsync (string username = null, string password = null, string domain = null, string saml = null);

        /// <summary>
        /// Endpoint to perform form-based authentication
        /// </summary>
        /// <remarks>
        /// Endpoint to perform form-based authentication
        /// </remarks>
        /// <exception cref="Genesys.Authorization.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="username">User name - should be in the format of &#39;domain\\username&#39; (optional)</param>
        /// <param name="password">Password (optional)</param>
        /// <param name="domain">Domain - used for SAML login only (optional)</param>
        /// <param name="saml">SAML - flag indication saml login (optional)</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> LoginAsyncWithHttpInfo (string username = null, string password = null, string domain = null, string saml = null);
        /// <summary>
        /// Logout user
        /// </summary>
        /// <remarks>
        /// This endpoint is called by oAuth2 clients to logout user
        /// </remarks>
        /// <exception cref="Genesys.Authorization.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization">OAuth 2.0 Bearer Token. Example: \&quot;Authorization: bearer a4b5da75-a584-4053-9227-0f0ab23ff06e\&quot; </param>
        /// <param name="global">If set all tokens for current user will be invalidated, otherwise only current token will be invalidated. (optional)</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse> LogoutAsync (string authorization, bool? global = null);

        /// <summary>
        /// Logout user
        /// </summary>
        /// <remarks>
        /// This endpoint is called by oAuth2 clients to logout user
        /// </remarks>
        /// <exception cref="Genesys.Authorization.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization">OAuth 2.0 Bearer Token. Example: \&quot;Authorization: bearer a4b5da75-a584-4053-9227-0f0ab23ff06e\&quot; </param>
        /// <param name="global">If set all tokens for current user will be invalidated, otherwise only current token will be invalidated. (optional)</param>
        /// <returns>Task of ApiResponse (ApiResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<ApiResponse>> LogoutAsyncWithHttpInfo (string authorization, bool? global = null);
        /// <summary>
        /// Endpoint to retrieve token
        /// </summary>
        /// <remarks>
        /// Can be called directly for Client Credential and Resource Owner Code flow.  Resource Owner example:   &#x60;curl client_name:client_secret@localhost:8095/oauth/token -d grant_type&#x3D;password -d client_id&#x3D;external_api_client-d scope&#x3D;openid -d username&#x3D;domain\\\\user -d password&#x3D;password&#x60;   Client credentials example:   &#x60;curl client_name:client_secret@localhost:8095/oauth/token -d grant_type&#x3D;client_credentials -d scope&#x3D;openid&#x60;
        /// </remarks>
        /// <exception cref="Genesys.Authorization.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of DefaultOAuth2AccessToken</returns>
        System.Threading.Tasks.Task<DefaultOAuth2AccessToken> RetrieveTokenAsync ();

        /// <summary>
        /// Endpoint to retrieve token
        /// </summary>
        /// <remarks>
        /// Can be called directly for Client Credential and Resource Owner Code flow.  Resource Owner example:   &#x60;curl client_name:client_secret@localhost:8095/oauth/token -d grant_type&#x3D;password -d client_id&#x3D;external_api_client-d scope&#x3D;openid -d username&#x3D;domain\\\\user -d password&#x3D;password&#x60;   Client credentials example:   &#x60;curl client_name:client_secret@localhost:8095/oauth/token -d grant_type&#x3D;client_credentials -d scope&#x3D;openid&#x60;
        /// </remarks>
        /// <exception cref="Genesys.Authorization.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (DefaultOAuth2AccessToken)</returns>
        System.Threading.Tasks.Task<ApiResponse<DefaultOAuth2AccessToken>> RetrieveTokenAsyncWithHttpInfo ();
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class AuthServerApi : IAuthServerApi
    {
        private Genesys.Authorization.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="AuthServerApi"/> class.
        /// </summary>
        /// <returns></returns>
        public AuthServerApi(String basePath)
        {
            this.Configuration = new Configuration(new ApiClient(basePath));

            ExceptionFactory = Genesys.Authorization.Client.Configuration.DefaultExceptionFactory;

            // ensure API client has configuration ready
            if (Configuration.ApiClient.Configuration == null)
            {
                this.Configuration.ApiClient.Configuration = this.Configuration;
            }
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="AuthServerApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public AuthServerApi(Configuration configuration = null)
        {
            if (configuration == null) // use the default one in Configuration
                this.Configuration = Configuration.Default;
            else
                this.Configuration = configuration;

            ExceptionFactory = Genesys.Authorization.Client.Configuration.DefaultExceptionFactory;

            // ensure API client has configuration ready
            if (Configuration.ApiClient.Configuration == null)
            {
                this.Configuration.ApiClient.Configuration = this.Configuration;
            }
        }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.ApiClient.RestClient.BaseUrl.ToString();
        }

        /// <summary>
        /// Sets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        [Obsolete("SetBasePath is deprecated, please do 'Configuration.ApiClient = new ApiClient(\"http://new-path\")' instead.")]
        public void SetBasePath(String basePath)
        {
            // do nothing
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public Configuration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public Genesys.Authorization.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Gets the default header.
        /// </summary>
        /// <returns>Dictionary of HTTP header</returns>
        [Obsolete("DefaultHeader is deprecated, please use Configuration.DefaultHeader instead.")]
        public Dictionary<String, String> DefaultHeader()
        {
            return this.Configuration.DefaultHeader;
        }

        /// <summary>
        /// Add default header.
        /// </summary>
        /// <param name="key">Header field name.</param>
        /// <param name="value">Header field value.</param>
        /// <returns></returns>
        [Obsolete("AddDefaultHeader is deprecated, please use Configuration.AddDefaultHeader instead.")]
        public void AddDefaultHeader(string key, string value)
        {
            this.Configuration.AddDefaultHeader(key, value);
        }

        /// <summary>
        /// Endpoint to perform authorization See http://callistaenterprise.se/blogg/teknik/2015/04/27/building-microservices-part-3-secure-APIs-with-OAuth/, We support implicit_grant  Implicit grant example:   curl -v -u genesys\\\\agent:password -XGET &#39;http://localhost:8095/oauth/authorize?response_type&#x3D;token &amp; client_id&#x3D;external_api_client &amp; scope&#x3D;openid &amp; redirect_uri&#x3D;http://localhost/  In this sample external_api_client is client_id of client with allowed **implicit** grant typeplease note that Location header will contain URI which is constructed from redirect_uri and contains access_code or auth_code and other optional info, sample:  Location: http://localhost#access_token&#x3D;76c785dc-ae3d-4569-8c79-cf4f23d70a07&amp;token_type&#x3D;bearer&amp;expires_in&#x3D;43199
        /// </summary>
        /// <exception cref="Genesys.Authorization.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="responseType">Response type</param>
        /// <param name="clientId">Client ID (id of application/service registered as client in IDP)</param>
        /// <param name="redirectUri">Redirect URI - will be the part of URL returned in &#39;Location&#39; header</param>
        /// <param name="authorization">Basic authorization. Example: &#39;Authorization: Basic Y3...MQ&#x3D;&#x3D;&#39; (optional)</param>
        /// <returns></returns>
        public void Authorize (string responseType, string clientId, string redirectUri, string authorization = null)
        {
             AuthorizeWithHttpInfo(responseType, clientId, redirectUri, authorization);
        }

        /// <summary>
        /// Endpoint to perform authorization See http://callistaenterprise.se/blogg/teknik/2015/04/27/building-microservices-part-3-secure-APIs-with-OAuth/, We support implicit_grant  Implicit grant example:   curl -v -u genesys\\\\agent:password -XGET &#39;http://localhost:8095/oauth/authorize?response_type&#x3D;token &amp; client_id&#x3D;external_api_client &amp; scope&#x3D;openid &amp; redirect_uri&#x3D;http://localhost/  In this sample external_api_client is client_id of client with allowed **implicit** grant typeplease note that Location header will contain URI which is constructed from redirect_uri and contains access_code or auth_code and other optional info, sample:  Location: http://localhost#access_token&#x3D;76c785dc-ae3d-4569-8c79-cf4f23d70a07&amp;token_type&#x3D;bearer&amp;expires_in&#x3D;43199
        /// </summary>
        /// <exception cref="Genesys.Authorization.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="responseType">Response type</param>
        /// <param name="clientId">Client ID (id of application/service registered as client in IDP)</param>
        /// <param name="redirectUri">Redirect URI - will be the part of URL returned in &#39;Location&#39; header</param>
        /// <param name="authorization">Basic authorization. Example: &#39;Authorization: Basic Y3...MQ&#x3D;&#x3D;&#39; (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> AuthorizeWithHttpInfo (string responseType, string clientId, string redirectUri, string authorization = null)
        {
            // verify the required parameter 'responseType' is set
            if (responseType == null)
                throw new ApiException(400, "Missing required parameter 'responseType' when calling AuthServerApi->Authorize");
            // verify the required parameter 'clientId' is set
            if (clientId == null)
                throw new ApiException(400, "Missing required parameter 'clientId' when calling AuthServerApi->Authorize");
            // verify the required parameter 'redirectUri' is set
            if (redirectUri == null)
                throw new ApiException(400, "Missing required parameter 'redirectUri' when calling AuthServerApi->Authorize");

            var localVarPath = "/oauth/authorize";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "*/*"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (responseType != null) localVarQueryParams.Add("response_type", Configuration.ApiClient.ParameterToString(responseType)); // query parameter
            if (clientId != null) localVarQueryParams.Add("client_id", Configuration.ApiClient.ParameterToString(clientId)); // query parameter
            if (redirectUri != null) localVarQueryParams.Add("redirect_uri", Configuration.ApiClient.ParameterToString(redirectUri)); // query parameter
            if (authorization != null) localVarHeaderParams.Add("Authorization", Configuration.ApiClient.ParameterToString(authorization)); // header parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("Authorize", localVarResponse);
                if (exception != null) throw exception;
            }

            
            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Endpoint to perform authorization See http://callistaenterprise.se/blogg/teknik/2015/04/27/building-microservices-part-3-secure-APIs-with-OAuth/, We support implicit_grant  Implicit grant example:   curl -v -u genesys\\\\agent:password -XGET &#39;http://localhost:8095/oauth/authorize?response_type&#x3D;token &amp; client_id&#x3D;external_api_client &amp; scope&#x3D;openid &amp; redirect_uri&#x3D;http://localhost/  In this sample external_api_client is client_id of client with allowed **implicit** grant typeplease note that Location header will contain URI which is constructed from redirect_uri and contains access_code or auth_code and other optional info, sample:  Location: http://localhost#access_token&#x3D;76c785dc-ae3d-4569-8c79-cf4f23d70a07&amp;token_type&#x3D;bearer&amp;expires_in&#x3D;43199
        /// </summary>
        /// <exception cref="Genesys.Authorization.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="responseType">Response type</param>
        /// <param name="clientId">Client ID (id of application/service registered as client in IDP)</param>
        /// <param name="redirectUri">Redirect URI - will be the part of URL returned in &#39;Location&#39; header</param>
        /// <param name="authorization">Basic authorization. Example: &#39;Authorization: Basic Y3...MQ&#x3D;&#x3D;&#39; (optional)</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task AuthorizeAsync (string responseType, string clientId, string redirectUri, string authorization = null)
        {
             await AuthorizeAsyncWithHttpInfo(responseType, clientId, redirectUri, authorization);

        }

        /// <summary>
        /// Endpoint to perform authorization See http://callistaenterprise.se/blogg/teknik/2015/04/27/building-microservices-part-3-secure-APIs-with-OAuth/, We support implicit_grant  Implicit grant example:   curl -v -u genesys\\\\agent:password -XGET &#39;http://localhost:8095/oauth/authorize?response_type&#x3D;token &amp; client_id&#x3D;external_api_client &amp; scope&#x3D;openid &amp; redirect_uri&#x3D;http://localhost/  In this sample external_api_client is client_id of client with allowed **implicit** grant typeplease note that Location header will contain URI which is constructed from redirect_uri and contains access_code or auth_code and other optional info, sample:  Location: http://localhost#access_token&#x3D;76c785dc-ae3d-4569-8c79-cf4f23d70a07&amp;token_type&#x3D;bearer&amp;expires_in&#x3D;43199
        /// </summary>
        /// <exception cref="Genesys.Authorization.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="responseType">Response type</param>
        /// <param name="clientId">Client ID (id of application/service registered as client in IDP)</param>
        /// <param name="redirectUri">Redirect URI - will be the part of URL returned in &#39;Location&#39; header</param>
        /// <param name="authorization">Basic authorization. Example: &#39;Authorization: Basic Y3...MQ&#x3D;&#x3D;&#39; (optional)</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> AuthorizeAsyncWithHttpInfo (string responseType, string clientId, string redirectUri, string authorization = null)
        {
            // verify the required parameter 'responseType' is set
            if (responseType == null)
                throw new ApiException(400, "Missing required parameter 'responseType' when calling AuthServerApi->Authorize");
            // verify the required parameter 'clientId' is set
            if (clientId == null)
                throw new ApiException(400, "Missing required parameter 'clientId' when calling AuthServerApi->Authorize");
            // verify the required parameter 'redirectUri' is set
            if (redirectUri == null)
                throw new ApiException(400, "Missing required parameter 'redirectUri' when calling AuthServerApi->Authorize");

            var localVarPath = "/oauth/authorize";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "*/*"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (responseType != null) localVarQueryParams.Add("response_type", Configuration.ApiClient.ParameterToString(responseType)); // query parameter
            if (clientId != null) localVarQueryParams.Add("client_id", Configuration.ApiClient.ParameterToString(clientId)); // query parameter
            if (redirectUri != null) localVarQueryParams.Add("redirect_uri", Configuration.ApiClient.ParameterToString(redirectUri)); // query parameter
            if (authorization != null) localVarHeaderParams.Add("Authorization", Configuration.ApiClient.ParameterToString(authorization)); // header parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("Authorize", localVarResponse);
                if (exception != null) throw exception;
            }

            
            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Change user password Change user password
        /// </summary>
        /// <exception cref="Genesys.Authorization.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request">request</param>
        /// <returns>ApiResponse</returns>
        public ApiResponse ChangePassword (ApiRequestChangePasswordOperation request)
        {
             ApiResponse<ApiResponse> localVarResponse = ChangePasswordWithHttpInfo(request);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Change user password Change user password
        /// </summary>
        /// <exception cref="Genesys.Authorization.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request">request</param>
        /// <returns>ApiResponse of ApiResponse</returns>
        public ApiResponse< ApiResponse > ChangePasswordWithHttpInfo (ApiRequestChangePasswordOperation request)
        {
            // verify the required parameter 'request' is set
            if (request == null)
                throw new ApiException(400, "Missing required parameter 'request' when calling AuthServerApi->ChangePassword");

            var localVarPath = "/change-password";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (request != null && request.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(request); // http body (model) parameter
            }
            else
            {
                localVarPostBody = request; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ChangePassword", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ApiResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ApiResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(ApiResponse)));
            
        }

        /// <summary>
        /// Change user password Change user password
        /// </summary>
        /// <exception cref="Genesys.Authorization.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request">request</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse> ChangePasswordAsync (ApiRequestChangePasswordOperation request)
        {
             ApiResponse<ApiResponse> localVarResponse = await ChangePasswordAsyncWithHttpInfo(request);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Change user password Change user password
        /// </summary>
        /// <exception cref="Genesys.Authorization.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request">request</param>
        /// <returns>Task of ApiResponse (ApiResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ApiResponse>> ChangePasswordAsyncWithHttpInfo (ApiRequestChangePasswordOperation request)
        {
            // verify the required parameter 'request' is set
            if (request == null)
                throw new ApiException(400, "Missing required parameter 'request' when calling AuthServerApi->ChangePassword");

            var localVarPath = "/change-password";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (request != null && request.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(request); // http body (model) parameter
            }
            else
            {
                localVarPostBody = request; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ChangePassword", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ApiResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ApiResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(ApiResponse)));
            
        }

        /// <summary>
        /// Get domain and authentication method by user name or domain name Get domain and authentication method by user name or domain name
        /// </summary>
        /// <exception cref="Genesys.Authorization.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="lookupOperation">lookupOperation</param>
        /// <returns>ApiResponseDomainLookupResult</returns>
        public ApiResponseDomainLookupResult DomainInfo (ApiRequestDomainLookupOperation lookupOperation)
        {
             ApiResponse<ApiResponseDomainLookupResult> localVarResponse = DomainInfoWithHttpInfo(lookupOperation);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get domain and authentication method by user name or domain name Get domain and authentication method by user name or domain name
        /// </summary>
        /// <exception cref="Genesys.Authorization.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="lookupOperation">lookupOperation</param>
        /// <returns>ApiResponse of ApiResponseDomainLookupResult</returns>
        public ApiResponse< ApiResponseDomainLookupResult > DomainInfoWithHttpInfo (ApiRequestDomainLookupOperation lookupOperation)
        {
            // verify the required parameter 'lookupOperation' is set
            if (lookupOperation == null)
                throw new ApiException(400, "Missing required parameter 'lookupOperation' when calling AuthServerApi->DomainInfo");

            var localVarPath = "/domain-lookup";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (lookupOperation != null && lookupOperation.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(lookupOperation); // http body (model) parameter
            }
            else
            {
                localVarPostBody = lookupOperation; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DomainInfo", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ApiResponseDomainLookupResult>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ApiResponseDomainLookupResult) Configuration.ApiClient.Deserialize(localVarResponse, typeof(ApiResponseDomainLookupResult)));
            
        }

        /// <summary>
        /// Get domain and authentication method by user name or domain name Get domain and authentication method by user name or domain name
        /// </summary>
        /// <exception cref="Genesys.Authorization.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="lookupOperation">lookupOperation</param>
        /// <returns>Task of ApiResponseDomainLookupResult</returns>
        public async System.Threading.Tasks.Task<ApiResponseDomainLookupResult> DomainInfoAsync (ApiRequestDomainLookupOperation lookupOperation)
        {
             ApiResponse<ApiResponseDomainLookupResult> localVarResponse = await DomainInfoAsyncWithHttpInfo(lookupOperation);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get domain and authentication method by user name or domain name Get domain and authentication method by user name or domain name
        /// </summary>
        /// <exception cref="Genesys.Authorization.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="lookupOperation">lookupOperation</param>
        /// <returns>Task of ApiResponse (ApiResponseDomainLookupResult)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ApiResponseDomainLookupResult>> DomainInfoAsyncWithHttpInfo (ApiRequestDomainLookupOperation lookupOperation)
        {
            // verify the required parameter 'lookupOperation' is set
            if (lookupOperation == null)
                throw new ApiException(400, "Missing required parameter 'lookupOperation' when calling AuthServerApi->DomainInfo");

            var localVarPath = "/domain-lookup";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (lookupOperation != null && lookupOperation.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(lookupOperation); // http body (model) parameter
            }
            else
            {
                localVarPostBody = lookupOperation; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DomainInfo", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ApiResponseDomainLookupResult>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ApiResponseDomainLookupResult) Configuration.ApiClient.Deserialize(localVarResponse, typeof(ApiResponseDomainLookupResult)));
            
        }

        /// <summary>
        /// Get logged out clients information Get logged out clients information
        /// </summary>
        /// <exception cref="Genesys.Authorization.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Object</returns>
        public Object GetLoggedout ()
        {
             ApiResponse<Object> localVarResponse = GetLoggedoutWithHttpInfo();
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get logged out clients information Get logged out clients information
        /// </summary>
        /// <exception cref="Genesys.Authorization.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of Object</returns>
        public ApiResponse< Object > GetLoggedoutWithHttpInfo ()
        {

            var localVarPath = "/loggedout";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetLoggedout", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Object) Configuration.ApiClient.Deserialize(localVarResponse, typeof(Object)));
            
        }

        /// <summary>
        /// Get logged out clients information Get logged out clients information
        /// </summary>
        /// <exception cref="Genesys.Authorization.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of Object</returns>
        public async System.Threading.Tasks.Task<Object> GetLoggedoutAsync ()
        {
             ApiResponse<Object> localVarResponse = await GetLoggedoutAsyncWithHttpInfo();
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get logged out clients information Get logged out clients information
        /// </summary>
        /// <exception cref="Genesys.Authorization.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (Object)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> GetLoggedoutAsyncWithHttpInfo ()
        {

            var localVarPath = "/loggedout";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetLoggedout", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Object) Configuration.ApiClient.Deserialize(localVarResponse, typeof(Object)));
            
        }

        /// <summary>
        /// Get user principal by OAUTH token This endpoint is called by oAuth2 clients to retrieve the principal by oAuth access token
        /// </summary>
        /// <exception cref="Genesys.Authorization.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization">OAuth 2.0 Bearer Token. Example: \&quot;Authorization: bearer a4b5da75-a584-4053-9227-0f0ab23ff06e\&quot; </param>
        /// <param name="auth">auth (optional)</param>
        /// <returns>CloudUserDetails</returns>
        public CloudUserDetails GetUserInfo (string authorization, Authentication auth = null)
        {
             ApiResponse<CloudUserDetails> localVarResponse = GetUserInfoWithHttpInfo(authorization, auth);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get user principal by OAUTH token This endpoint is called by oAuth2 clients to retrieve the principal by oAuth access token
        /// </summary>
        /// <exception cref="Genesys.Authorization.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization">OAuth 2.0 Bearer Token. Example: \&quot;Authorization: bearer a4b5da75-a584-4053-9227-0f0ab23ff06e\&quot; </param>
        /// <param name="auth">auth (optional)</param>
        /// <returns>ApiResponse of CloudUserDetails</returns>
        public ApiResponse< CloudUserDetails > GetUserInfoWithHttpInfo (string authorization, Authentication auth = null)
        {
            // verify the required parameter 'authorization' is set
            if (authorization == null)
                throw new ApiException(400, "Missing required parameter 'authorization' when calling AuthServerApi->GetUserInfo");

            var localVarPath = "/userinfo";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (authorization != null) localVarHeaderParams.Add("Authorization", Configuration.ApiClient.ParameterToString(authorization)); // header parameter
            if (auth != null && auth.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(auth); // http body (model) parameter
            }
            else
            {
                localVarPostBody = auth; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetUserInfo", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<CloudUserDetails>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (CloudUserDetails) Configuration.ApiClient.Deserialize(localVarResponse, typeof(CloudUserDetails)));
            
        }

        /// <summary>
        /// Get user principal by OAUTH token This endpoint is called by oAuth2 clients to retrieve the principal by oAuth access token
        /// </summary>
        /// <exception cref="Genesys.Authorization.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization">OAuth 2.0 Bearer Token. Example: \&quot;Authorization: bearer a4b5da75-a584-4053-9227-0f0ab23ff06e\&quot; </param>
        /// <param name="auth">auth (optional)</param>
        /// <returns>Task of CloudUserDetails</returns>
        public async System.Threading.Tasks.Task<CloudUserDetails> GetUserInfoAsync (string authorization, Authentication auth = null)
        {
             ApiResponse<CloudUserDetails> localVarResponse = await GetUserInfoAsyncWithHttpInfo(authorization, auth);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get user principal by OAUTH token This endpoint is called by oAuth2 clients to retrieve the principal by oAuth access token
        /// </summary>
        /// <exception cref="Genesys.Authorization.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization">OAuth 2.0 Bearer Token. Example: \&quot;Authorization: bearer a4b5da75-a584-4053-9227-0f0ab23ff06e\&quot; </param>
        /// <param name="auth">auth (optional)</param>
        /// <returns>Task of ApiResponse (CloudUserDetails)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<CloudUserDetails>> GetUserInfoAsyncWithHttpInfo (string authorization, Authentication auth = null)
        {
            // verify the required parameter 'authorization' is set
            if (authorization == null)
                throw new ApiException(400, "Missing required parameter 'authorization' when calling AuthServerApi->GetUserInfo");

            var localVarPath = "/userinfo";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (authorization != null) localVarHeaderParams.Add("Authorization", Configuration.ApiClient.ParameterToString(authorization)); // header parameter
            if (auth != null && auth.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(auth); // http body (model) parameter
            }
            else
            {
                localVarPostBody = auth; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetUserInfo", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<CloudUserDetails>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (CloudUserDetails) Configuration.ApiClient.Deserialize(localVarResponse, typeof(CloudUserDetails)));
            
        }

        /// <summary>
        /// Endpoint to perform form-based authentication Endpoint to perform form-based authentication
        /// </summary>
        /// <exception cref="Genesys.Authorization.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="username">User name - should be in the format of &#39;domain\\username&#39; (optional)</param>
        /// <param name="password">Password (optional)</param>
        /// <param name="domain">Domain - used for SAML login only (optional)</param>
        /// <param name="saml">SAML - flag indication saml login (optional)</param>
        /// <returns></returns>
        public void Login (string username = null, string password = null, string domain = null, string saml = null)
        {
             LoginWithHttpInfo(username, password, domain, saml);
        }

        /// <summary>
        /// Endpoint to perform form-based authentication Endpoint to perform form-based authentication
        /// </summary>
        /// <exception cref="Genesys.Authorization.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="username">User name - should be in the format of &#39;domain\\username&#39; (optional)</param>
        /// <param name="password">Password (optional)</param>
        /// <param name="domain">Domain - used for SAML login only (optional)</param>
        /// <param name="saml">SAML - flag indication saml login (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> LoginWithHttpInfo (string username = null, string password = null, string domain = null, string saml = null)
        {

            var localVarPath = "/login";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "*/*"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (username != null) localVarQueryParams.Add("username", Configuration.ApiClient.ParameterToString(username)); // query parameter
            if (password != null) localVarQueryParams.Add("password", Configuration.ApiClient.ParameterToString(password)); // query parameter
            if (domain != null) localVarQueryParams.Add("domain", Configuration.ApiClient.ParameterToString(domain)); // query parameter
            if (saml != null) localVarQueryParams.Add("saml", Configuration.ApiClient.ParameterToString(saml)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("Login", localVarResponse);
                if (exception != null) throw exception;
            }

            
            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Endpoint to perform form-based authentication Endpoint to perform form-based authentication
        /// </summary>
        /// <exception cref="Genesys.Authorization.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="username">User name - should be in the format of &#39;domain\\username&#39; (optional)</param>
        /// <param name="password">Password (optional)</param>
        /// <param name="domain">Domain - used for SAML login only (optional)</param>
        /// <param name="saml">SAML - flag indication saml login (optional)</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task LoginAsync (string username = null, string password = null, string domain = null, string saml = null)
        {
             await LoginAsyncWithHttpInfo(username, password, domain, saml);

        }

        /// <summary>
        /// Endpoint to perform form-based authentication Endpoint to perform form-based authentication
        /// </summary>
        /// <exception cref="Genesys.Authorization.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="username">User name - should be in the format of &#39;domain\\username&#39; (optional)</param>
        /// <param name="password">Password (optional)</param>
        /// <param name="domain">Domain - used for SAML login only (optional)</param>
        /// <param name="saml">SAML - flag indication saml login (optional)</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> LoginAsyncWithHttpInfo (string username = null, string password = null, string domain = null, string saml = null)
        {

            var localVarPath = "/login";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "*/*"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (username != null) localVarQueryParams.Add("username", Configuration.ApiClient.ParameterToString(username)); // query parameter
            if (password != null) localVarQueryParams.Add("password", Configuration.ApiClient.ParameterToString(password)); // query parameter
            if (domain != null) localVarQueryParams.Add("domain", Configuration.ApiClient.ParameterToString(domain)); // query parameter
            if (saml != null) localVarQueryParams.Add("saml", Configuration.ApiClient.ParameterToString(saml)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("Login", localVarResponse);
                if (exception != null) throw exception;
            }

            
            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Logout user This endpoint is called by oAuth2 clients to logout user
        /// </summary>
        /// <exception cref="Genesys.Authorization.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization">OAuth 2.0 Bearer Token. Example: \&quot;Authorization: bearer a4b5da75-a584-4053-9227-0f0ab23ff06e\&quot; </param>
        /// <param name="global">If set all tokens for current user will be invalidated, otherwise only current token will be invalidated. (optional)</param>
        /// <returns>ApiResponse</returns>
        public ApiResponse Logout (string authorization, bool? global = null)
        {
             ApiResponse<ApiResponse> localVarResponse = LogoutWithHttpInfo(authorization, global);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Logout user This endpoint is called by oAuth2 clients to logout user
        /// </summary>
        /// <exception cref="Genesys.Authorization.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization">OAuth 2.0 Bearer Token. Example: \&quot;Authorization: bearer a4b5da75-a584-4053-9227-0f0ab23ff06e\&quot; </param>
        /// <param name="global">If set all tokens for current user will be invalidated, otherwise only current token will be invalidated. (optional)</param>
        /// <returns>ApiResponse of ApiResponse</returns>
        public ApiResponse< ApiResponse > LogoutWithHttpInfo (string authorization, bool? global = null)
        {
            // verify the required parameter 'authorization' is set
            if (authorization == null)
                throw new ApiException(400, "Missing required parameter 'authorization' when calling AuthServerApi->Logout");

            var localVarPath = "/logout";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (global != null) localVarQueryParams.Add("global", Configuration.ApiClient.ParameterToString(global)); // query parameter
            if (authorization != null) localVarHeaderParams.Add("Authorization", Configuration.ApiClient.ParameterToString(authorization)); // header parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("Logout", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ApiResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ApiResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(ApiResponse)));
            
        }

        /// <summary>
        /// Logout user This endpoint is called by oAuth2 clients to logout user
        /// </summary>
        /// <exception cref="Genesys.Authorization.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization">OAuth 2.0 Bearer Token. Example: \&quot;Authorization: bearer a4b5da75-a584-4053-9227-0f0ab23ff06e\&quot; </param>
        /// <param name="global">If set all tokens for current user will be invalidated, otherwise only current token will be invalidated. (optional)</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse> LogoutAsync (string authorization, bool? global = null)
        {
             ApiResponse<ApiResponse> localVarResponse = await LogoutAsyncWithHttpInfo(authorization, global);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Logout user This endpoint is called by oAuth2 clients to logout user
        /// </summary>
        /// <exception cref="Genesys.Authorization.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization">OAuth 2.0 Bearer Token. Example: \&quot;Authorization: bearer a4b5da75-a584-4053-9227-0f0ab23ff06e\&quot; </param>
        /// <param name="global">If set all tokens for current user will be invalidated, otherwise only current token will be invalidated. (optional)</param>
        /// <returns>Task of ApiResponse (ApiResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ApiResponse>> LogoutAsyncWithHttpInfo (string authorization, bool? global = null)
        {
            // verify the required parameter 'authorization' is set
            if (authorization == null)
                throw new ApiException(400, "Missing required parameter 'authorization' when calling AuthServerApi->Logout");

            var localVarPath = "/logout";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (global != null) localVarQueryParams.Add("global", Configuration.ApiClient.ParameterToString(global)); // query parameter
            if (authorization != null) localVarHeaderParams.Add("Authorization", Configuration.ApiClient.ParameterToString(authorization)); // header parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("Logout", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ApiResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ApiResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(ApiResponse)));
            
        }

        /// <summary>
        /// Endpoint to retrieve token Can be called directly for Client Credential and Resource Owner Code flow.  Resource Owner example:   &#x60;curl client_name:client_secret@localhost:8095/oauth/token -d grant_type&#x3D;password -d client_id&#x3D;external_api_client-d scope&#x3D;openid -d username&#x3D;domain\\\\user -d password&#x3D;password&#x60;   Client credentials example:   &#x60;curl client_name:client_secret@localhost:8095/oauth/token -d grant_type&#x3D;client_credentials -d scope&#x3D;openid&#x60;
        /// </summary>
        /// <exception cref="Genesys.Authorization.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>DefaultOAuth2AccessToken</returns>
        public DefaultOAuth2AccessToken RetrieveToken ()
        {
             ApiResponse<DefaultOAuth2AccessToken> localVarResponse = RetrieveTokenWithHttpInfo();
             return localVarResponse.Data;
        }

        /// <summary>
        /// Endpoint to retrieve token Can be called directly for Client Credential and Resource Owner Code flow.  Resource Owner example:   &#x60;curl client_name:client_secret@localhost:8095/oauth/token -d grant_type&#x3D;password -d client_id&#x3D;external_api_client-d scope&#x3D;openid -d username&#x3D;domain\\\\user -d password&#x3D;password&#x60;   Client credentials example:   &#x60;curl client_name:client_secret@localhost:8095/oauth/token -d grant_type&#x3D;client_credentials -d scope&#x3D;openid&#x60;
        /// </summary>
        /// <exception cref="Genesys.Authorization.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of DefaultOAuth2AccessToken</returns>
        public ApiResponse< DefaultOAuth2AccessToken > RetrieveTokenWithHttpInfo ()
        {

            var localVarPath = "/oauth/token";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("RetrieveToken", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<DefaultOAuth2AccessToken>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (DefaultOAuth2AccessToken) Configuration.ApiClient.Deserialize(localVarResponse, typeof(DefaultOAuth2AccessToken)));
            
        }

        /// <summary>
        /// Endpoint to retrieve token Can be called directly for Client Credential and Resource Owner Code flow.  Resource Owner example:   &#x60;curl client_name:client_secret@localhost:8095/oauth/token -d grant_type&#x3D;password -d client_id&#x3D;external_api_client-d scope&#x3D;openid -d username&#x3D;domain\\\\user -d password&#x3D;password&#x60;   Client credentials example:   &#x60;curl client_name:client_secret@localhost:8095/oauth/token -d grant_type&#x3D;client_credentials -d scope&#x3D;openid&#x60;
        /// </summary>
        /// <exception cref="Genesys.Authorization.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of DefaultOAuth2AccessToken</returns>
        public async System.Threading.Tasks.Task<DefaultOAuth2AccessToken> RetrieveTokenAsync ()
        {
             ApiResponse<DefaultOAuth2AccessToken> localVarResponse = await RetrieveTokenAsyncWithHttpInfo();
             return localVarResponse.Data;

        }

        /// <summary>
        /// Endpoint to retrieve token Can be called directly for Client Credential and Resource Owner Code flow.  Resource Owner example:   &#x60;curl client_name:client_secret@localhost:8095/oauth/token -d grant_type&#x3D;password -d client_id&#x3D;external_api_client-d scope&#x3D;openid -d username&#x3D;domain\\\\user -d password&#x3D;password&#x60;   Client credentials example:   &#x60;curl client_name:client_secret@localhost:8095/oauth/token -d grant_type&#x3D;client_credentials -d scope&#x3D;openid&#x60;
        /// </summary>
        /// <exception cref="Genesys.Authorization.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (DefaultOAuth2AccessToken)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<DefaultOAuth2AccessToken>> RetrieveTokenAsyncWithHttpInfo ()
        {

            var localVarPath = "/oauth/token";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("RetrieveToken", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<DefaultOAuth2AccessToken>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (DefaultOAuth2AccessToken) Configuration.ApiClient.Deserialize(localVarResponse, typeof(DefaultOAuth2AccessToken)));
            
        }

    }
}
