/* 
 * Authorization API
 *
 * Authorization API
 *
 * OpenAPI spec version: 9.0.000.00.662
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = Genesys.Authorization.Client.SwaggerDateConverter;

namespace Genesys.Authorization.Model
{
    /// <summary>
    /// BaseClientDetails
    /// </summary>
    [DataContract]
    public partial class BaseClientDetails :  IEquatable<BaseClientDetails>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="BaseClientDetails" /> class.
        /// </summary>
        /// <param name="AccessTokenValidity">AccessTokenValidity.</param>
        /// <param name="Authorities">Authorities.</param>
        /// <param name="AuthorizedGrantTypes">AuthorizedGrantTypes.</param>
        /// <param name="Autoapprove">Autoapprove.</param>
        /// <param name="ClientId">ClientId.</param>
        /// <param name="ClientSecret">ClientSecret.</param>
        /// <param name="RedirectUri">RedirectUri.</param>
        /// <param name="RefreshTokenValidity">RefreshTokenValidity.</param>
        /// <param name="ResourceIds">ResourceIds.</param>
        /// <param name="Scope">Scope.</param>
        public BaseClientDetails(int? AccessTokenValidity = default(int?), List<string> Authorities = default(List<string>), string AuthorizedGrantTypes = default(string), string Autoapprove = default(string), string ClientId = default(string), string ClientSecret = default(string), List<string> RedirectUri = default(List<string>), int? RefreshTokenValidity = default(int?), string ResourceIds = default(string), string Scope = default(string))
        {
            this.AccessTokenValidity = AccessTokenValidity;
            this.Authorities = Authorities;
            this.AuthorizedGrantTypes = AuthorizedGrantTypes;
            this.Autoapprove = Autoapprove;
            this.ClientId = ClientId;
            this.ClientSecret = ClientSecret;
            this.RedirectUri = RedirectUri;
            this.RefreshTokenValidity = RefreshTokenValidity;
            this.ResourceIds = ResourceIds;
            this.Scope = Scope;
        }
        
        /// <summary>
        /// Gets or Sets AccessTokenValidity
        /// </summary>
        [DataMember(Name="access_token_validity", EmitDefaultValue=false)]
        public int? AccessTokenValidity { get; set; }

        /// <summary>
        /// Gets or Sets Authorities
        /// </summary>
        [DataMember(Name="authorities", EmitDefaultValue=false)]
        public List<string> Authorities { get; set; }

        /// <summary>
        /// Gets or Sets AuthorizedGrantTypes
        /// </summary>
        [DataMember(Name="authorized_grant_types", EmitDefaultValue=false)]
        public string AuthorizedGrantTypes { get; set; }

        /// <summary>
        /// Gets or Sets Autoapprove
        /// </summary>
        [DataMember(Name="autoapprove", EmitDefaultValue=false)]
        public string Autoapprove { get; set; }

        /// <summary>
        /// Gets or Sets ClientId
        /// </summary>
        [DataMember(Name="client_id", EmitDefaultValue=false)]
        public string ClientId { get; set; }

        /// <summary>
        /// Gets or Sets ClientSecret
        /// </summary>
        [DataMember(Name="client_secret", EmitDefaultValue=false)]
        public string ClientSecret { get; set; }

        /// <summary>
        /// Gets or Sets RedirectUri
        /// </summary>
        [DataMember(Name="redirect_uri", EmitDefaultValue=false)]
        public List<string> RedirectUri { get; set; }

        /// <summary>
        /// Gets or Sets RefreshTokenValidity
        /// </summary>
        [DataMember(Name="refresh_token_validity", EmitDefaultValue=false)]
        public int? RefreshTokenValidity { get; set; }

        /// <summary>
        /// Gets or Sets ResourceIds
        /// </summary>
        [DataMember(Name="resource_ids", EmitDefaultValue=false)]
        public string ResourceIds { get; set; }

        /// <summary>
        /// Gets or Sets Scope
        /// </summary>
        [DataMember(Name="scope", EmitDefaultValue=false)]
        public string Scope { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class BaseClientDetails {\n");
            sb.Append("  AccessTokenValidity: ").Append(AccessTokenValidity).Append("\n");
            sb.Append("  Authorities: ").Append(Authorities).Append("\n");
            sb.Append("  AuthorizedGrantTypes: ").Append(AuthorizedGrantTypes).Append("\n");
            sb.Append("  Autoapprove: ").Append(Autoapprove).Append("\n");
            sb.Append("  ClientId: ").Append(ClientId).Append("\n");
            sb.Append("  ClientSecret: ").Append(ClientSecret).Append("\n");
            sb.Append("  RedirectUri: ").Append(RedirectUri).Append("\n");
            sb.Append("  RefreshTokenValidity: ").Append(RefreshTokenValidity).Append("\n");
            sb.Append("  ResourceIds: ").Append(ResourceIds).Append("\n");
            sb.Append("  Scope: ").Append(Scope).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            return this.Equals(obj as BaseClientDetails);
        }

        /// <summary>
        /// Returns true if BaseClientDetails instances are equal
        /// </summary>
        /// <param name="other">Instance of BaseClientDetails to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(BaseClientDetails other)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            if (other == null)
                return false;

            return 
                (
                    this.AccessTokenValidity == other.AccessTokenValidity ||
                    this.AccessTokenValidity != null &&
                    this.AccessTokenValidity.Equals(other.AccessTokenValidity)
                ) && 
                (
                    this.Authorities == other.Authorities ||
                    this.Authorities != null &&
                    this.Authorities.SequenceEqual(other.Authorities)
                ) && 
                (
                    this.AuthorizedGrantTypes == other.AuthorizedGrantTypes ||
                    this.AuthorizedGrantTypes != null &&
                    this.AuthorizedGrantTypes.Equals(other.AuthorizedGrantTypes)
                ) && 
                (
                    this.Autoapprove == other.Autoapprove ||
                    this.Autoapprove != null &&
                    this.Autoapprove.Equals(other.Autoapprove)
                ) && 
                (
                    this.ClientId == other.ClientId ||
                    this.ClientId != null &&
                    this.ClientId.Equals(other.ClientId)
                ) && 
                (
                    this.ClientSecret == other.ClientSecret ||
                    this.ClientSecret != null &&
                    this.ClientSecret.Equals(other.ClientSecret)
                ) && 
                (
                    this.RedirectUri == other.RedirectUri ||
                    this.RedirectUri != null &&
                    this.RedirectUri.SequenceEqual(other.RedirectUri)
                ) && 
                (
                    this.RefreshTokenValidity == other.RefreshTokenValidity ||
                    this.RefreshTokenValidity != null &&
                    this.RefreshTokenValidity.Equals(other.RefreshTokenValidity)
                ) && 
                (
                    this.ResourceIds == other.ResourceIds ||
                    this.ResourceIds != null &&
                    this.ResourceIds.Equals(other.ResourceIds)
                ) && 
                (
                    this.Scope == other.Scope ||
                    this.Scope != null &&
                    this.Scope.Equals(other.Scope)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            // credit: http://stackoverflow.com/a/263416/677735
            unchecked // Overflow is fine, just wrap
            {
                int hash = 41;
                // Suitable nullity checks etc, of course :)
                if (this.AccessTokenValidity != null)
                    hash = hash * 59 + this.AccessTokenValidity.GetHashCode();
                if (this.Authorities != null)
                    hash = hash * 59 + this.Authorities.GetHashCode();
                if (this.AuthorizedGrantTypes != null)
                    hash = hash * 59 + this.AuthorizedGrantTypes.GetHashCode();
                if (this.Autoapprove != null)
                    hash = hash * 59 + this.Autoapprove.GetHashCode();
                if (this.ClientId != null)
                    hash = hash * 59 + this.ClientId.GetHashCode();
                if (this.ClientSecret != null)
                    hash = hash * 59 + this.ClientSecret.GetHashCode();
                if (this.RedirectUri != null)
                    hash = hash * 59 + this.RedirectUri.GetHashCode();
                if (this.RefreshTokenValidity != null)
                    hash = hash * 59 + this.RefreshTokenValidity.GetHashCode();
                if (this.ResourceIds != null)
                    hash = hash * 59 + this.ResourceIds.GetHashCode();
                if (this.Scope != null)
                    hash = hash * 59 + this.Scope.GetHashCode();
                return hash;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
