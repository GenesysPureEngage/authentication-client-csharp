/* 
 * Authentication API
 *
 * Authentication API
 *
 * OpenAPI spec version: 9.0.000.21.1405
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = Genesys.Internal.Authentication.Client.SwaggerDateConverter;

namespace Genesys.Internal.Authentication.Model
{
    /// <summary>
    /// This class describes the user in the system. Applicable to different entities (contact-center level user, application/service, cloud system admin)
    /// </summary>
    [DataContract]
    public partial class OpenIdUserInfo :  IEquatable<OpenIdUserInfo>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="OpenIdUserInfo" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected OpenIdUserInfo() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="OpenIdUserInfo" /> class.
        /// </summary>
        /// <param name="Aud">OpenID Connect &#39;aud&#39; claim. This is present if user authenticated with openid scope..</param>
        /// <param name="Authorities">Authorities assigned to the user. (required).</param>
        /// <param name="ContactCenterId">OpenID Connect &#39;aud&#39; claim. This is present if user authenticated with openid scope..</param>
        /// <param name="Dbid">The DBID of the corresponding user record in Configuration Server. This is present if the user belongs to a contact center..</param>
        /// <param name="Email">OpenID Connect &#39;email&#39; claim. This is present if user authenticated with openid scope..</param>
        /// <param name="EnvironmentId">OpenID Connect &#39;environment_id&#39; claim. This is present if user authenticated with openid scope..</param>
        /// <param name="FamilyName">OpenID Connect &#39;family_name&#39; (last name) claim. This is present if user authenticated with openid scope..</param>
        /// <param name="GivenName">OpenID Connect &#39;given_name&#39; (first name) claim. This is present if user authenticated with openid scope..</param>
        /// <param name="Sub">OpenID Connect &#39;sub&#39; claim. This is present if user authenticated with openid scope..</param>
        /// <param name="UserName">OpenID Connect &#39;aud&#39; claim. This is present if user authenticated with openid scope..</param>
        public OpenIdUserInfo(string Aud = default(string), UserRole Authorities = default(UserRole), string ContactCenterId = default(string), int? Dbid = default(int?), string Email = default(string), string EnvironmentId = default(string), string FamilyName = default(string), string GivenName = default(string), string Sub = default(string), string UserName = default(string))
        {
            // to ensure "Authorities" is required (not null)
            if (Authorities == null)
            {
                throw new InvalidDataException("Authorities is a required property for OpenIdUserInfo and cannot be null");
            }
            else
            {
                this.Authorities = Authorities;
            }
            this.Aud = Aud;
            this.ContactCenterId = ContactCenterId;
            this.Dbid = Dbid;
            this.Email = Email;
            this.EnvironmentId = EnvironmentId;
            this.FamilyName = FamilyName;
            this.GivenName = GivenName;
            this.Sub = Sub;
            this.UserName = UserName;
        }
        
        /// <summary>
        /// OpenID Connect &#39;aud&#39; claim. This is present if user authenticated with openid scope.
        /// </summary>
        /// <value>OpenID Connect &#39;aud&#39; claim. This is present if user authenticated with openid scope.</value>
        [DataMember(Name="aud", EmitDefaultValue=false)]
        public string Aud { get; set; }

        /// <summary>
        /// Authorities assigned to the user.
        /// </summary>
        /// <value>Authorities assigned to the user.</value>
        [DataMember(Name="authorities", EmitDefaultValue=false)]
        public UserRole Authorities { get; set; }

        /// <summary>
        /// OpenID Connect &#39;aud&#39; claim. This is present if user authenticated with openid scope.
        /// </summary>
        /// <value>OpenID Connect &#39;aud&#39; claim. This is present if user authenticated with openid scope.</value>
        [DataMember(Name="contact_center_id", EmitDefaultValue=false)]
        public string ContactCenterId { get; set; }

        /// <summary>
        /// The DBID of the corresponding user record in Configuration Server. This is present if the user belongs to a contact center.
        /// </summary>
        /// <value>The DBID of the corresponding user record in Configuration Server. This is present if the user belongs to a contact center.</value>
        [DataMember(Name="dbid", EmitDefaultValue=false)]
        public int? Dbid { get; set; }

        /// <summary>
        /// OpenID Connect &#39;email&#39; claim. This is present if user authenticated with openid scope.
        /// </summary>
        /// <value>OpenID Connect &#39;email&#39; claim. This is present if user authenticated with openid scope.</value>
        [DataMember(Name="email", EmitDefaultValue=false)]
        public string Email { get; set; }

        /// <summary>
        /// OpenID Connect &#39;environment_id&#39; claim. This is present if user authenticated with openid scope.
        /// </summary>
        /// <value>OpenID Connect &#39;environment_id&#39; claim. This is present if user authenticated with openid scope.</value>
        [DataMember(Name="environment_id", EmitDefaultValue=false)]
        public string EnvironmentId { get; set; }

        /// <summary>
        /// OpenID Connect &#39;family_name&#39; (last name) claim. This is present if user authenticated with openid scope.
        /// </summary>
        /// <value>OpenID Connect &#39;family_name&#39; (last name) claim. This is present if user authenticated with openid scope.</value>
        [DataMember(Name="family_name", EmitDefaultValue=false)]
        public string FamilyName { get; set; }

        /// <summary>
        /// OpenID Connect &#39;given_name&#39; (first name) claim. This is present if user authenticated with openid scope.
        /// </summary>
        /// <value>OpenID Connect &#39;given_name&#39; (first name) claim. This is present if user authenticated with openid scope.</value>
        [DataMember(Name="given_name", EmitDefaultValue=false)]
        public string GivenName { get; set; }

        /// <summary>
        /// OpenID Connect &#39;sub&#39; claim. This is present if user authenticated with openid scope.
        /// </summary>
        /// <value>OpenID Connect &#39;sub&#39; claim. This is present if user authenticated with openid scope.</value>
        [DataMember(Name="sub", EmitDefaultValue=false)]
        public string Sub { get; set; }

        /// <summary>
        /// OpenID Connect &#39;aud&#39; claim. This is present if user authenticated with openid scope.
        /// </summary>
        /// <value>OpenID Connect &#39;aud&#39; claim. This is present if user authenticated with openid scope.</value>
        [DataMember(Name="user_name", EmitDefaultValue=false)]
        public string UserName { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class OpenIdUserInfo {\n");
            sb.Append("  Aud: ").Append(Aud).Append("\n");
            sb.Append("  Authorities: ").Append(Authorities).Append("\n");
            sb.Append("  ContactCenterId: ").Append(ContactCenterId).Append("\n");
            sb.Append("  Dbid: ").Append(Dbid).Append("\n");
            sb.Append("  Email: ").Append(Email).Append("\n");
            sb.Append("  EnvironmentId: ").Append(EnvironmentId).Append("\n");
            sb.Append("  FamilyName: ").Append(FamilyName).Append("\n");
            sb.Append("  GivenName: ").Append(GivenName).Append("\n");
            sb.Append("  Sub: ").Append(Sub).Append("\n");
            sb.Append("  UserName: ").Append(UserName).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as OpenIdUserInfo);
        }

        /// <summary>
        /// Returns true if OpenIdUserInfo instances are equal
        /// </summary>
        /// <param name="input">Instance of OpenIdUserInfo to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(OpenIdUserInfo input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Aud == input.Aud ||
                    (this.Aud != null &&
                    this.Aud.Equals(input.Aud))
                ) && 
                (
                    this.Authorities == input.Authorities ||
                    (this.Authorities != null &&
                    this.Authorities.Equals(input.Authorities))
                ) && 
                (
                    this.ContactCenterId == input.ContactCenterId ||
                    (this.ContactCenterId != null &&
                    this.ContactCenterId.Equals(input.ContactCenterId))
                ) && 
                (
                    this.Dbid == input.Dbid ||
                    (this.Dbid != null &&
                    this.Dbid.Equals(input.Dbid))
                ) && 
                (
                    this.Email == input.Email ||
                    (this.Email != null &&
                    this.Email.Equals(input.Email))
                ) && 
                (
                    this.EnvironmentId == input.EnvironmentId ||
                    (this.EnvironmentId != null &&
                    this.EnvironmentId.Equals(input.EnvironmentId))
                ) && 
                (
                    this.FamilyName == input.FamilyName ||
                    (this.FamilyName != null &&
                    this.FamilyName.Equals(input.FamilyName))
                ) && 
                (
                    this.GivenName == input.GivenName ||
                    (this.GivenName != null &&
                    this.GivenName.Equals(input.GivenName))
                ) && 
                (
                    this.Sub == input.Sub ||
                    (this.Sub != null &&
                    this.Sub.Equals(input.Sub))
                ) && 
                (
                    this.UserName == input.UserName ||
                    (this.UserName != null &&
                    this.UserName.Equals(input.UserName))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Aud != null)
                    hashCode = hashCode * 59 + this.Aud.GetHashCode();
                if (this.Authorities != null)
                    hashCode = hashCode * 59 + this.Authorities.GetHashCode();
                if (this.ContactCenterId != null)
                    hashCode = hashCode * 59 + this.ContactCenterId.GetHashCode();
                if (this.Dbid != null)
                    hashCode = hashCode * 59 + this.Dbid.GetHashCode();
                if (this.Email != null)
                    hashCode = hashCode * 59 + this.Email.GetHashCode();
                if (this.EnvironmentId != null)
                    hashCode = hashCode * 59 + this.EnvironmentId.GetHashCode();
                if (this.FamilyName != null)
                    hashCode = hashCode * 59 + this.FamilyName.GetHashCode();
                if (this.GivenName != null)
                    hashCode = hashCode * 59 + this.GivenName.GetHashCode();
                if (this.Sub != null)
                    hashCode = hashCode * 59 + this.Sub.GetHashCode();
                if (this.UserName != null)
                    hashCode = hashCode * 59 + this.UserName.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
