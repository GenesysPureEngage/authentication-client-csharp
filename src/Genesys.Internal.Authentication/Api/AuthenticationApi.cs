/* 
 * Authentication API
 *
 * Authentication API
 *
 * OpenAPI spec version: 9.0.000.00.978
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using RestSharp;
using Genesys.Internal.Authentication.Client;
using Genesys.Internal.Authentication.Model;

namespace Genesys.Internal.Authentication.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IAuthenticationApi : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Perform authorization.
        /// </summary>
        /// <remarks>
        /// Perform authorization based on the code grant type &amp;mdash; either Authorization Code Grant or Implicit Grant. For more information, see [Authorization Endpoint](https://tools.ietf.org/html/rfc6749#section-3.1). **Note:** For the optional **scope** parameter, the Authentication API supports only the &#39;*&#39; value.
        /// </remarks>
        /// <exception cref="Genesys.Internal.Authentication.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="responseType">The response type to let the Authentication API know which grant flow you&#39;re using. Possible values are &#39;code&#39; for Authorization Code Grant or &#39;token&#39; for Implicit Grant. For more information about this parameter, see [Response Type](https://tools.ietf.org/html/rfc6749#section-3.1.1).</param>
        /// <param name="redirectUri">The URI that you want users to be redirected to after entering valid credentials during an Implicit or Authorization Code grant. The Authentication API includes this as part of the URI it returns in the &#39;Location&#39; header.</param>
        /// <param name="clientId">The ID of the application or service that is registered as the client. You&#39;ll need to get this value from your PureEngage Cloud representative.</param>
        /// <param name="authorization">Basic authorization. For example: &#39;Authorization: Basic Y3...MQ&#x3D;&#x3D;&#39; (optional)</param>
        /// <param name="scope">Scope (optional)</param>
        /// <returns></returns>
        void Authorize (string responseType, string redirectUri, string clientId, string authorization = null, string scope = null);

        /// <summary>
        /// Perform authorization.
        /// </summary>
        /// <remarks>
        /// Perform authorization based on the code grant type &amp;mdash; either Authorization Code Grant or Implicit Grant. For more information, see [Authorization Endpoint](https://tools.ietf.org/html/rfc6749#section-3.1). **Note:** For the optional **scope** parameter, the Authentication API supports only the &#39;*&#39; value.
        /// </remarks>
        /// <exception cref="Genesys.Internal.Authentication.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="responseType">The response type to let the Authentication API know which grant flow you&#39;re using. Possible values are &#39;code&#39; for Authorization Code Grant or &#39;token&#39; for Implicit Grant. For more information about this parameter, see [Response Type](https://tools.ietf.org/html/rfc6749#section-3.1.1).</param>
        /// <param name="redirectUri">The URI that you want users to be redirected to after entering valid credentials during an Implicit or Authorization Code grant. The Authentication API includes this as part of the URI it returns in the &#39;Location&#39; header.</param>
        /// <param name="clientId">The ID of the application or service that is registered as the client. You&#39;ll need to get this value from your PureEngage Cloud representative.</param>
        /// <param name="authorization">Basic authorization. For example: &#39;Authorization: Basic Y3...MQ&#x3D;&#x3D;&#39; (optional)</param>
        /// <param name="scope">Scope (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> AuthorizeWithHttpInfo (string responseType, string redirectUri, string clientId, string authorization = null, string scope = null);
        /// <summary>
        /// Change password.
        /// </summary>
        /// <remarks>
        /// Change the user&#39;s password.
        /// </remarks>
        /// <exception cref="Genesys.Internal.Authentication.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request">request</param>
        /// <param name="authorization">OAuth 2.0 Bearer Token. Example: \&quot;Authorization: bearer a4b5da75-a584-4053-9227-0f0ab23ff06e\&quot;  (optional, default to bearer)</param>
        /// <returns>ApiResponse</returns>
        ApiResponse ChangePassword (ChangePasswordOperation request, string authorization = null);

        /// <summary>
        /// Change password.
        /// </summary>
        /// <remarks>
        /// Change the user&#39;s password.
        /// </remarks>
        /// <exception cref="Genesys.Internal.Authentication.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request">request</param>
        /// <param name="authorization">OAuth 2.0 Bearer Token. Example: \&quot;Authorization: bearer a4b5da75-a584-4053-9227-0f0ab23ff06e\&quot;  (optional, default to bearer)</param>
        /// <returns>ApiResponse of ApiResponse</returns>
        ApiResponse<ApiResponse> ChangePasswordWithHttpInfo (ChangePasswordOperation request, string authorization = null);
        /// <summary>
        /// Get user information by access token.
        /// </summary>
        /// <remarks>
        /// Get information about a user by their OAuth 2 access token.
        /// </remarks>
        /// <exception cref="Genesys.Internal.Authentication.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization">The OAuth 2 bearer access token you received from &#x60;/auth/v3/oauth/token&#x60;. For example: \&quot;Authorization: bearer a4b5da75-a584-4053-9227-0f0ab23ff06e\&quot; </param>
        /// <returns>CloudUserDetails</returns>
        CloudUserDetails GetInfo (string authorization);

        /// <summary>
        /// Get user information by access token.
        /// </summary>
        /// <remarks>
        /// Get information about a user by their OAuth 2 access token.
        /// </remarks>
        /// <exception cref="Genesys.Internal.Authentication.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization">The OAuth 2 bearer access token you received from &#x60;/auth/v3/oauth/token&#x60;. For example: \&quot;Authorization: bearer a4b5da75-a584-4053-9227-0f0ab23ff06e\&quot; </param>
        /// <returns>ApiResponse of CloudUserDetails</returns>
        ApiResponse<CloudUserDetails> GetInfoWithHttpInfo (string authorization);
        /// <summary>
        /// Retrieve access token.
        /// </summary>
        /// <remarks>
        /// Retrieve an access token based on the grant type &amp;mdash; Authorization Code Grant, Resource Owner Password Credentials Grant or Client Credentials Grant. For more information, see [Token Endpoint](https://tools.ietf.org/html/rfc6749). **Note:** For the optional **scope** parameter, the Authentication API supports only the &#39;*&#39; value.
        /// </remarks>
        /// <exception cref="Genesys.Internal.Authentication.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="grantType">The grant type you use to implement authentication.</param>
        /// <param name="authorization">Basic authorization. For example: &#39;Authorization: Basic Y3...MQ&#x3D;&#x3D;&#39; (optional)</param>
        /// <param name="accept">The media type the Authentication API should should use for the response. For example: &#39;Accept: application/x-www-form-urlencoded&#39; (optional)</param>
        /// <param name="scope">Scope (optional)</param>
        /// <param name="clientId">The ID of the application or service that is registered as the client. You&#39;ll need to get this value from your PureEngage Cloud representative. (optional)</param>
        /// <param name="refreshToken">See [Refresh Token](https://tools.ietf.org/html/rfc6749#section-1.5) for details. (optional)</param>
        /// <param name="username">The agent&#39;s username. (optional)</param>
        /// <param name="password">The agent&#39;s password (optional)</param>
        /// <returns>DefaultOAuth2AccessToken</returns>
        DefaultOAuth2AccessToken RetrieveToken (string grantType, string authorization = null, string accept = null, string scope = null, string clientId = null, string refreshToken = null, string username = null, string password = null);

        /// <summary>
        /// Retrieve access token.
        /// </summary>
        /// <remarks>
        /// Retrieve an access token based on the grant type &amp;mdash; Authorization Code Grant, Resource Owner Password Credentials Grant or Client Credentials Grant. For more information, see [Token Endpoint](https://tools.ietf.org/html/rfc6749). **Note:** For the optional **scope** parameter, the Authentication API supports only the &#39;*&#39; value.
        /// </remarks>
        /// <exception cref="Genesys.Internal.Authentication.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="grantType">The grant type you use to implement authentication.</param>
        /// <param name="authorization">Basic authorization. For example: &#39;Authorization: Basic Y3...MQ&#x3D;&#x3D;&#39; (optional)</param>
        /// <param name="accept">The media type the Authentication API should should use for the response. For example: &#39;Accept: application/x-www-form-urlencoded&#39; (optional)</param>
        /// <param name="scope">Scope (optional)</param>
        /// <param name="clientId">The ID of the application or service that is registered as the client. You&#39;ll need to get this value from your PureEngage Cloud representative. (optional)</param>
        /// <param name="refreshToken">See [Refresh Token](https://tools.ietf.org/html/rfc6749#section-1.5) for details. (optional)</param>
        /// <param name="username">The agent&#39;s username. (optional)</param>
        /// <param name="password">The agent&#39;s password (optional)</param>
        /// <returns>ApiResponse of DefaultOAuth2AccessToken</returns>
        ApiResponse<DefaultOAuth2AccessToken> RetrieveTokenWithHttpInfo (string grantType, string authorization = null, string accept = null, string scope = null, string clientId = null, string refreshToken = null, string username = null, string password = null);
        /// <summary>
        /// Perform form-based authentication.
        /// </summary>
        /// <remarks>
        /// Perform form-based authentication by submitting an agent&#39;s username and password.
        /// </remarks>
        /// <exception cref="Genesys.Internal.Authentication.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="username">The agent&#39;s username, formatted as &#39;tenant\\username&#39;.</param>
        /// <param name="password">The agent&#39;s password.</param>
        /// <param name="saml">Specifies whether to login using [Security Assertion Markup Language](https://en.wikipedia.org/wiki/Security_Assertion_Markup_Language) (SAML). (optional)</param>
        /// <returns></returns>
        void SignIn (string username, string password, bool? saml = null);

        /// <summary>
        /// Perform form-based authentication.
        /// </summary>
        /// <remarks>
        /// Perform form-based authentication by submitting an agent&#39;s username and password.
        /// </remarks>
        /// <exception cref="Genesys.Internal.Authentication.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="username">The agent&#39;s username, formatted as &#39;tenant\\username&#39;.</param>
        /// <param name="password">The agent&#39;s password.</param>
        /// <param name="saml">Specifies whether to login using [Security Assertion Markup Language](https://en.wikipedia.org/wiki/Security_Assertion_Markup_Language) (SAML). (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> SignInWithHttpInfo (string username, string password, bool? saml = null);
        /// <summary>
        /// Sign-out a logged in user.
        /// </summary>
        /// <remarks>
        /// Sign-out the current user and invalidate either the current token or all tokens associated with the user.
        /// </remarks>
        /// <exception cref="Genesys.Internal.Authentication.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization">The OAuth 2 bearer access token you received from &#x60;/auth/v3/oauth/token&#x60;. For example: \&quot;Authorization: bearer a4b5da75-a584-4053-9227-0f0ab23ff06e\&quot; </param>
        /// <param name="global">Specifies whether to invalidate all tokens for the current user (&#x60;true&#x60;) or only the current token (&#x60;false&#x60;). (optional)</param>
        /// <returns>ApiResponse</returns>
        ApiResponse SignOut (string authorization, bool? global = null);

        /// <summary>
        /// Sign-out a logged in user.
        /// </summary>
        /// <remarks>
        /// Sign-out the current user and invalidate either the current token or all tokens associated with the user.
        /// </remarks>
        /// <exception cref="Genesys.Internal.Authentication.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization">The OAuth 2 bearer access token you received from &#x60;/auth/v3/oauth/token&#x60;. For example: \&quot;Authorization: bearer a4b5da75-a584-4053-9227-0f0ab23ff06e\&quot; </param>
        /// <param name="global">Specifies whether to invalidate all tokens for the current user (&#x60;true&#x60;) or only the current token (&#x60;false&#x60;). (optional)</param>
        /// <returns>ApiResponse of ApiResponse</returns>
        ApiResponse<ApiResponse> SignOutWithHttpInfo (string authorization, bool? global = null);
        /// <summary>
        /// Sign-out a logged in user.
        /// </summary>
        /// <remarks>
        /// Sign-out the current user and invalidate either the current token or all tokens associated with the user.
        /// </remarks>
        /// <exception cref="Genesys.Internal.Authentication.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization">The OAuth 2 bearer access token you received from &#x60;/auth/v3/oauth/token&#x60;. For example: \&quot;Authorization: bearer a4b5da75-a584-4053-9227-0f0ab23ff06e\&quot; </param>
        /// <param name="global">Specifies whether to invalidate all tokens for the current user (&#x60;true&#x60;) or only the current token (&#x60;false&#x60;). (optional)</param>
        /// <param name="redirectUri">Specifies URI where browser will be redirected after successful sign-out (optional)</param>
        /// <returns>ApiResponse</returns>
        ApiResponse SignOut1 (string authorization, bool? global = null, string redirectUri = null);

        /// <summary>
        /// Sign-out a logged in user.
        /// </summary>
        /// <remarks>
        /// Sign-out the current user and invalidate either the current token or all tokens associated with the user.
        /// </remarks>
        /// <exception cref="Genesys.Internal.Authentication.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization">The OAuth 2 bearer access token you received from &#x60;/auth/v3/oauth/token&#x60;. For example: \&quot;Authorization: bearer a4b5da75-a584-4053-9227-0f0ab23ff06e\&quot; </param>
        /// <param name="global">Specifies whether to invalidate all tokens for the current user (&#x60;true&#x60;) or only the current token (&#x60;false&#x60;). (optional)</param>
        /// <param name="redirectUri">Specifies URI where browser will be redirected after successful sign-out (optional)</param>
        /// <returns>ApiResponse of ApiResponse</returns>
        ApiResponse<ApiResponse> SignOut1WithHttpInfo (string authorization, bool? global = null, string redirectUri = null);
        /// <summary>
        /// Get authentication scheme.
        /// </summary>
        /// <remarks>
        /// Get the authentication scheme by user name or tenant name. The return value is   &#39;saml&#39; if the contact center has [Security Assertion Markup Language](https://en.wikipedia.org/wiki/Security_Assertion_Markup_Language)   (SAML) enabled; otherwise, the return value is &#39;basic&#39;.
        /// </remarks>
        /// <exception cref="Genesys.Internal.Authentication.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="lookupData">Data for scheme lookup. (optional)</param>
        /// <returns>ApiResponse</returns>
        ApiResponse TenantInfo (AuthSchemeLookupData lookupData = null);

        /// <summary>
        /// Get authentication scheme.
        /// </summary>
        /// <remarks>
        /// Get the authentication scheme by user name or tenant name. The return value is   &#39;saml&#39; if the contact center has [Security Assertion Markup Language](https://en.wikipedia.org/wiki/Security_Assertion_Markup_Language)   (SAML) enabled; otherwise, the return value is &#39;basic&#39;.
        /// </remarks>
        /// <exception cref="Genesys.Internal.Authentication.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="lookupData">Data for scheme lookup. (optional)</param>
        /// <returns>ApiResponse of ApiResponse</returns>
        ApiResponse<ApiResponse> TenantInfoWithHttpInfo (AuthSchemeLookupData lookupData = null);
        #endregion Synchronous Operations
        #region Asynchronous Operations
        /// <summary>
        /// Perform authorization.
        /// </summary>
        /// <remarks>
        /// Perform authorization based on the code grant type &amp;mdash; either Authorization Code Grant or Implicit Grant. For more information, see [Authorization Endpoint](https://tools.ietf.org/html/rfc6749#section-3.1). **Note:** For the optional **scope** parameter, the Authentication API supports only the &#39;*&#39; value.
        /// </remarks>
        /// <exception cref="Genesys.Internal.Authentication.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="responseType">The response type to let the Authentication API know which grant flow you&#39;re using. Possible values are &#39;code&#39; for Authorization Code Grant or &#39;token&#39; for Implicit Grant. For more information about this parameter, see [Response Type](https://tools.ietf.org/html/rfc6749#section-3.1.1).</param>
        /// <param name="redirectUri">The URI that you want users to be redirected to after entering valid credentials during an Implicit or Authorization Code grant. The Authentication API includes this as part of the URI it returns in the &#39;Location&#39; header.</param>
        /// <param name="clientId">The ID of the application or service that is registered as the client. You&#39;ll need to get this value from your PureEngage Cloud representative.</param>
        /// <param name="authorization">Basic authorization. For example: &#39;Authorization: Basic Y3...MQ&#x3D;&#x3D;&#39; (optional)</param>
        /// <param name="scope">Scope (optional)</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task AuthorizeAsync (string responseType, string redirectUri, string clientId, string authorization = null, string scope = null);

        /// <summary>
        /// Perform authorization.
        /// </summary>
        /// <remarks>
        /// Perform authorization based on the code grant type &amp;mdash; either Authorization Code Grant or Implicit Grant. For more information, see [Authorization Endpoint](https://tools.ietf.org/html/rfc6749#section-3.1). **Note:** For the optional **scope** parameter, the Authentication API supports only the &#39;*&#39; value.
        /// </remarks>
        /// <exception cref="Genesys.Internal.Authentication.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="responseType">The response type to let the Authentication API know which grant flow you&#39;re using. Possible values are &#39;code&#39; for Authorization Code Grant or &#39;token&#39; for Implicit Grant. For more information about this parameter, see [Response Type](https://tools.ietf.org/html/rfc6749#section-3.1.1).</param>
        /// <param name="redirectUri">The URI that you want users to be redirected to after entering valid credentials during an Implicit or Authorization Code grant. The Authentication API includes this as part of the URI it returns in the &#39;Location&#39; header.</param>
        /// <param name="clientId">The ID of the application or service that is registered as the client. You&#39;ll need to get this value from your PureEngage Cloud representative.</param>
        /// <param name="authorization">Basic authorization. For example: &#39;Authorization: Basic Y3...MQ&#x3D;&#x3D;&#39; (optional)</param>
        /// <param name="scope">Scope (optional)</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> AuthorizeAsyncWithHttpInfo (string responseType, string redirectUri, string clientId, string authorization = null, string scope = null);
        /// <summary>
        /// Change password.
        /// </summary>
        /// <remarks>
        /// Change the user&#39;s password.
        /// </remarks>
        /// <exception cref="Genesys.Internal.Authentication.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request">request</param>
        /// <param name="authorization">OAuth 2.0 Bearer Token. Example: \&quot;Authorization: bearer a4b5da75-a584-4053-9227-0f0ab23ff06e\&quot;  (optional, default to bearer)</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse> ChangePasswordAsync (ChangePasswordOperation request, string authorization = null);

        /// <summary>
        /// Change password.
        /// </summary>
        /// <remarks>
        /// Change the user&#39;s password.
        /// </remarks>
        /// <exception cref="Genesys.Internal.Authentication.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request">request</param>
        /// <param name="authorization">OAuth 2.0 Bearer Token. Example: \&quot;Authorization: bearer a4b5da75-a584-4053-9227-0f0ab23ff06e\&quot;  (optional, default to bearer)</param>
        /// <returns>Task of ApiResponse (ApiResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<ApiResponse>> ChangePasswordAsyncWithHttpInfo (ChangePasswordOperation request, string authorization = null);
        /// <summary>
        /// Get user information by access token.
        /// </summary>
        /// <remarks>
        /// Get information about a user by their OAuth 2 access token.
        /// </remarks>
        /// <exception cref="Genesys.Internal.Authentication.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization">The OAuth 2 bearer access token you received from &#x60;/auth/v3/oauth/token&#x60;. For example: \&quot;Authorization: bearer a4b5da75-a584-4053-9227-0f0ab23ff06e\&quot; </param>
        /// <returns>Task of CloudUserDetails</returns>
        System.Threading.Tasks.Task<CloudUserDetails> GetInfoAsync (string authorization);

        /// <summary>
        /// Get user information by access token.
        /// </summary>
        /// <remarks>
        /// Get information about a user by their OAuth 2 access token.
        /// </remarks>
        /// <exception cref="Genesys.Internal.Authentication.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization">The OAuth 2 bearer access token you received from &#x60;/auth/v3/oauth/token&#x60;. For example: \&quot;Authorization: bearer a4b5da75-a584-4053-9227-0f0ab23ff06e\&quot; </param>
        /// <returns>Task of ApiResponse (CloudUserDetails)</returns>
        System.Threading.Tasks.Task<ApiResponse<CloudUserDetails>> GetInfoAsyncWithHttpInfo (string authorization);
        /// <summary>
        /// Retrieve access token.
        /// </summary>
        /// <remarks>
        /// Retrieve an access token based on the grant type &amp;mdash; Authorization Code Grant, Resource Owner Password Credentials Grant or Client Credentials Grant. For more information, see [Token Endpoint](https://tools.ietf.org/html/rfc6749). **Note:** For the optional **scope** parameter, the Authentication API supports only the &#39;*&#39; value.
        /// </remarks>
        /// <exception cref="Genesys.Internal.Authentication.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="grantType">The grant type you use to implement authentication.</param>
        /// <param name="authorization">Basic authorization. For example: &#39;Authorization: Basic Y3...MQ&#x3D;&#x3D;&#39; (optional)</param>
        /// <param name="accept">The media type the Authentication API should should use for the response. For example: &#39;Accept: application/x-www-form-urlencoded&#39; (optional)</param>
        /// <param name="scope">Scope (optional)</param>
        /// <param name="clientId">The ID of the application or service that is registered as the client. You&#39;ll need to get this value from your PureEngage Cloud representative. (optional)</param>
        /// <param name="refreshToken">See [Refresh Token](https://tools.ietf.org/html/rfc6749#section-1.5) for details. (optional)</param>
        /// <param name="username">The agent&#39;s username. (optional)</param>
        /// <param name="password">The agent&#39;s password (optional)</param>
        /// <returns>Task of DefaultOAuth2AccessToken</returns>
        System.Threading.Tasks.Task<DefaultOAuth2AccessToken> RetrieveTokenAsync (string grantType, string authorization = null, string accept = null, string scope = null, string clientId = null, string refreshToken = null, string username = null, string password = null);

        /// <summary>
        /// Retrieve access token.
        /// </summary>
        /// <remarks>
        /// Retrieve an access token based on the grant type &amp;mdash; Authorization Code Grant, Resource Owner Password Credentials Grant or Client Credentials Grant. For more information, see [Token Endpoint](https://tools.ietf.org/html/rfc6749). **Note:** For the optional **scope** parameter, the Authentication API supports only the &#39;*&#39; value.
        /// </remarks>
        /// <exception cref="Genesys.Internal.Authentication.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="grantType">The grant type you use to implement authentication.</param>
        /// <param name="authorization">Basic authorization. For example: &#39;Authorization: Basic Y3...MQ&#x3D;&#x3D;&#39; (optional)</param>
        /// <param name="accept">The media type the Authentication API should should use for the response. For example: &#39;Accept: application/x-www-form-urlencoded&#39; (optional)</param>
        /// <param name="scope">Scope (optional)</param>
        /// <param name="clientId">The ID of the application or service that is registered as the client. You&#39;ll need to get this value from your PureEngage Cloud representative. (optional)</param>
        /// <param name="refreshToken">See [Refresh Token](https://tools.ietf.org/html/rfc6749#section-1.5) for details. (optional)</param>
        /// <param name="username">The agent&#39;s username. (optional)</param>
        /// <param name="password">The agent&#39;s password (optional)</param>
        /// <returns>Task of ApiResponse (DefaultOAuth2AccessToken)</returns>
        System.Threading.Tasks.Task<ApiResponse<DefaultOAuth2AccessToken>> RetrieveTokenAsyncWithHttpInfo (string grantType, string authorization = null, string accept = null, string scope = null, string clientId = null, string refreshToken = null, string username = null, string password = null);
        /// <summary>
        /// Perform form-based authentication.
        /// </summary>
        /// <remarks>
        /// Perform form-based authentication by submitting an agent&#39;s username and password.
        /// </remarks>
        /// <exception cref="Genesys.Internal.Authentication.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="username">The agent&#39;s username, formatted as &#39;tenant\\username&#39;.</param>
        /// <param name="password">The agent&#39;s password.</param>
        /// <param name="saml">Specifies whether to login using [Security Assertion Markup Language](https://en.wikipedia.org/wiki/Security_Assertion_Markup_Language) (SAML). (optional)</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task SignInAsync (string username, string password, bool? saml = null);

        /// <summary>
        /// Perform form-based authentication.
        /// </summary>
        /// <remarks>
        /// Perform form-based authentication by submitting an agent&#39;s username and password.
        /// </remarks>
        /// <exception cref="Genesys.Internal.Authentication.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="username">The agent&#39;s username, formatted as &#39;tenant\\username&#39;.</param>
        /// <param name="password">The agent&#39;s password.</param>
        /// <param name="saml">Specifies whether to login using [Security Assertion Markup Language](https://en.wikipedia.org/wiki/Security_Assertion_Markup_Language) (SAML). (optional)</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> SignInAsyncWithHttpInfo (string username, string password, bool? saml = null);
        /// <summary>
        /// Sign-out a logged in user.
        /// </summary>
        /// <remarks>
        /// Sign-out the current user and invalidate either the current token or all tokens associated with the user.
        /// </remarks>
        /// <exception cref="Genesys.Internal.Authentication.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization">The OAuth 2 bearer access token you received from &#x60;/auth/v3/oauth/token&#x60;. For example: \&quot;Authorization: bearer a4b5da75-a584-4053-9227-0f0ab23ff06e\&quot; </param>
        /// <param name="global">Specifies whether to invalidate all tokens for the current user (&#x60;true&#x60;) or only the current token (&#x60;false&#x60;). (optional)</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse> SignOutAsync (string authorization, bool? global = null);

        /// <summary>
        /// Sign-out a logged in user.
        /// </summary>
        /// <remarks>
        /// Sign-out the current user and invalidate either the current token or all tokens associated with the user.
        /// </remarks>
        /// <exception cref="Genesys.Internal.Authentication.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization">The OAuth 2 bearer access token you received from &#x60;/auth/v3/oauth/token&#x60;. For example: \&quot;Authorization: bearer a4b5da75-a584-4053-9227-0f0ab23ff06e\&quot; </param>
        /// <param name="global">Specifies whether to invalidate all tokens for the current user (&#x60;true&#x60;) or only the current token (&#x60;false&#x60;). (optional)</param>
        /// <returns>Task of ApiResponse (ApiResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<ApiResponse>> SignOutAsyncWithHttpInfo (string authorization, bool? global = null);
        /// <summary>
        /// Sign-out a logged in user.
        /// </summary>
        /// <remarks>
        /// Sign-out the current user and invalidate either the current token or all tokens associated with the user.
        /// </remarks>
        /// <exception cref="Genesys.Internal.Authentication.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization">The OAuth 2 bearer access token you received from &#x60;/auth/v3/oauth/token&#x60;. For example: \&quot;Authorization: bearer a4b5da75-a584-4053-9227-0f0ab23ff06e\&quot; </param>
        /// <param name="global">Specifies whether to invalidate all tokens for the current user (&#x60;true&#x60;) or only the current token (&#x60;false&#x60;). (optional)</param>
        /// <param name="redirectUri">Specifies URI where browser will be redirected after successful sign-out (optional)</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse> SignOut1Async (string authorization, bool? global = null, string redirectUri = null);

        /// <summary>
        /// Sign-out a logged in user.
        /// </summary>
        /// <remarks>
        /// Sign-out the current user and invalidate either the current token or all tokens associated with the user.
        /// </remarks>
        /// <exception cref="Genesys.Internal.Authentication.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization">The OAuth 2 bearer access token you received from &#x60;/auth/v3/oauth/token&#x60;. For example: \&quot;Authorization: bearer a4b5da75-a584-4053-9227-0f0ab23ff06e\&quot; </param>
        /// <param name="global">Specifies whether to invalidate all tokens for the current user (&#x60;true&#x60;) or only the current token (&#x60;false&#x60;). (optional)</param>
        /// <param name="redirectUri">Specifies URI where browser will be redirected after successful sign-out (optional)</param>
        /// <returns>Task of ApiResponse (ApiResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<ApiResponse>> SignOut1AsyncWithHttpInfo (string authorization, bool? global = null, string redirectUri = null);
        /// <summary>
        /// Get authentication scheme.
        /// </summary>
        /// <remarks>
        /// Get the authentication scheme by user name or tenant name. The return value is   &#39;saml&#39; if the contact center has [Security Assertion Markup Language](https://en.wikipedia.org/wiki/Security_Assertion_Markup_Language)   (SAML) enabled; otherwise, the return value is &#39;basic&#39;.
        /// </remarks>
        /// <exception cref="Genesys.Internal.Authentication.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="lookupData">Data for scheme lookup. (optional)</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse> TenantInfoAsync (AuthSchemeLookupData lookupData = null);

        /// <summary>
        /// Get authentication scheme.
        /// </summary>
        /// <remarks>
        /// Get the authentication scheme by user name or tenant name. The return value is   &#39;saml&#39; if the contact center has [Security Assertion Markup Language](https://en.wikipedia.org/wiki/Security_Assertion_Markup_Language)   (SAML) enabled; otherwise, the return value is &#39;basic&#39;.
        /// </remarks>
        /// <exception cref="Genesys.Internal.Authentication.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="lookupData">Data for scheme lookup. (optional)</param>
        /// <returns>Task of ApiResponse (ApiResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<ApiResponse>> TenantInfoAsyncWithHttpInfo (AuthSchemeLookupData lookupData = null);
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class AuthenticationApi : IAuthenticationApi
    {
        private Genesys.Internal.Authentication.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="AuthenticationApi"/> class.
        /// </summary>
        /// <returns></returns>
        public AuthenticationApi(String basePath)
        {
            this.Configuration = new Configuration { BasePath = basePath };

            ExceptionFactory = Genesys.Internal.Authentication.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="AuthenticationApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public AuthenticationApi(Configuration configuration = null)
        {
            if (configuration == null) // use the default one in Configuration
                this.Configuration = Configuration.Default;
            else
                this.Configuration = configuration;

            ExceptionFactory = Genesys.Internal.Authentication.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.ApiClient.RestClient.BaseUrl.ToString();
        }

        /// <summary>
        /// Sets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        [Obsolete("SetBasePath is deprecated, please do 'Configuration.ApiClient = new ApiClient(\"http://new-path\")' instead.")]
        public void SetBasePath(String basePath)
        {
            // do nothing
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public Configuration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public Genesys.Internal.Authentication.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Gets the default header.
        /// </summary>
        /// <returns>Dictionary of HTTP header</returns>
        [Obsolete("DefaultHeader is deprecated, please use Configuration.DefaultHeader instead.")]
        public IDictionary<String, String> DefaultHeader()
        {
            return new ReadOnlyDictionary<string, string>(this.Configuration.DefaultHeader);
        }

        /// <summary>
        /// Add default header.
        /// </summary>
        /// <param name="key">Header field name.</param>
        /// <param name="value">Header field value.</param>
        /// <returns></returns>
        [Obsolete("AddDefaultHeader is deprecated, please use Configuration.AddDefaultHeader instead.")]
        public void AddDefaultHeader(string key, string value)
        {
            this.Configuration.AddDefaultHeader(key, value);
        }

        /// <summary>
        /// Perform authorization. Perform authorization based on the code grant type &amp;mdash; either Authorization Code Grant or Implicit Grant. For more information, see [Authorization Endpoint](https://tools.ietf.org/html/rfc6749#section-3.1). **Note:** For the optional **scope** parameter, the Authentication API supports only the &#39;*&#39; value.
        /// </summary>
        /// <exception cref="Genesys.Internal.Authentication.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="responseType">The response type to let the Authentication API know which grant flow you&#39;re using. Possible values are &#39;code&#39; for Authorization Code Grant or &#39;token&#39; for Implicit Grant. For more information about this parameter, see [Response Type](https://tools.ietf.org/html/rfc6749#section-3.1.1).</param>
        /// <param name="redirectUri">The URI that you want users to be redirected to after entering valid credentials during an Implicit or Authorization Code grant. The Authentication API includes this as part of the URI it returns in the &#39;Location&#39; header.</param>
        /// <param name="clientId">The ID of the application or service that is registered as the client. You&#39;ll need to get this value from your PureEngage Cloud representative.</param>
        /// <param name="authorization">Basic authorization. For example: &#39;Authorization: Basic Y3...MQ&#x3D;&#x3D;&#39; (optional)</param>
        /// <param name="scope">Scope (optional)</param>
        /// <returns></returns>
        public void Authorize (string responseType, string redirectUri, string clientId, string authorization = null, string scope = null)
        {
             AuthorizeWithHttpInfo(responseType, redirectUri, clientId, authorization, scope);
        }

        /// <summary>
        /// Perform authorization. Perform authorization based on the code grant type &amp;mdash; either Authorization Code Grant or Implicit Grant. For more information, see [Authorization Endpoint](https://tools.ietf.org/html/rfc6749#section-3.1). **Note:** For the optional **scope** parameter, the Authentication API supports only the &#39;*&#39; value.
        /// </summary>
        /// <exception cref="Genesys.Internal.Authentication.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="responseType">The response type to let the Authentication API know which grant flow you&#39;re using. Possible values are &#39;code&#39; for Authorization Code Grant or &#39;token&#39; for Implicit Grant. For more information about this parameter, see [Response Type](https://tools.ietf.org/html/rfc6749#section-3.1.1).</param>
        /// <param name="redirectUri">The URI that you want users to be redirected to after entering valid credentials during an Implicit or Authorization Code grant. The Authentication API includes this as part of the URI it returns in the &#39;Location&#39; header.</param>
        /// <param name="clientId">The ID of the application or service that is registered as the client. You&#39;ll need to get this value from your PureEngage Cloud representative.</param>
        /// <param name="authorization">Basic authorization. For example: &#39;Authorization: Basic Y3...MQ&#x3D;&#x3D;&#39; (optional)</param>
        /// <param name="scope">Scope (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> AuthorizeWithHttpInfo (string responseType, string redirectUri, string clientId, string authorization = null, string scope = null)
        {
            // verify the required parameter 'responseType' is set
            if (responseType == null)
                throw new ApiException(400, "Missing required parameter 'responseType' when calling AuthenticationApi->Authorize");
            // verify the required parameter 'redirectUri' is set
            if (redirectUri == null)
                throw new ApiException(400, "Missing required parameter 'redirectUri' when calling AuthenticationApi->Authorize");
            // verify the required parameter 'clientId' is set
            if (clientId == null)
                throw new ApiException(400, "Missing required parameter 'clientId' when calling AuthenticationApi->Authorize");

            var localVarPath = "/oauth/authorize";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (responseType != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "response_type", responseType)); // query parameter
            if (scope != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "scope", scope)); // query parameter
            if (redirectUri != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "redirect_uri", redirectUri)); // query parameter
            if (clientId != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "client_id", clientId)); // query parameter
            if (authorization != null) localVarHeaderParams.Add("Authorization", Configuration.ApiClient.ParameterToString(authorization)); // header parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("Authorize", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Perform authorization. Perform authorization based on the code grant type &amp;mdash; either Authorization Code Grant or Implicit Grant. For more information, see [Authorization Endpoint](https://tools.ietf.org/html/rfc6749#section-3.1). **Note:** For the optional **scope** parameter, the Authentication API supports only the &#39;*&#39; value.
        /// </summary>
        /// <exception cref="Genesys.Internal.Authentication.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="responseType">The response type to let the Authentication API know which grant flow you&#39;re using. Possible values are &#39;code&#39; for Authorization Code Grant or &#39;token&#39; for Implicit Grant. For more information about this parameter, see [Response Type](https://tools.ietf.org/html/rfc6749#section-3.1.1).</param>
        /// <param name="redirectUri">The URI that you want users to be redirected to after entering valid credentials during an Implicit or Authorization Code grant. The Authentication API includes this as part of the URI it returns in the &#39;Location&#39; header.</param>
        /// <param name="clientId">The ID of the application or service that is registered as the client. You&#39;ll need to get this value from your PureEngage Cloud representative.</param>
        /// <param name="authorization">Basic authorization. For example: &#39;Authorization: Basic Y3...MQ&#x3D;&#x3D;&#39; (optional)</param>
        /// <param name="scope">Scope (optional)</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task AuthorizeAsync (string responseType, string redirectUri, string clientId, string authorization = null, string scope = null)
        {
             await AuthorizeAsyncWithHttpInfo(responseType, redirectUri, clientId, authorization, scope);

        }

        /// <summary>
        /// Perform authorization. Perform authorization based on the code grant type &amp;mdash; either Authorization Code Grant or Implicit Grant. For more information, see [Authorization Endpoint](https://tools.ietf.org/html/rfc6749#section-3.1). **Note:** For the optional **scope** parameter, the Authentication API supports only the &#39;*&#39; value.
        /// </summary>
        /// <exception cref="Genesys.Internal.Authentication.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="responseType">The response type to let the Authentication API know which grant flow you&#39;re using. Possible values are &#39;code&#39; for Authorization Code Grant or &#39;token&#39; for Implicit Grant. For more information about this parameter, see [Response Type](https://tools.ietf.org/html/rfc6749#section-3.1.1).</param>
        /// <param name="redirectUri">The URI that you want users to be redirected to after entering valid credentials during an Implicit or Authorization Code grant. The Authentication API includes this as part of the URI it returns in the &#39;Location&#39; header.</param>
        /// <param name="clientId">The ID of the application or service that is registered as the client. You&#39;ll need to get this value from your PureEngage Cloud representative.</param>
        /// <param name="authorization">Basic authorization. For example: &#39;Authorization: Basic Y3...MQ&#x3D;&#x3D;&#39; (optional)</param>
        /// <param name="scope">Scope (optional)</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> AuthorizeAsyncWithHttpInfo (string responseType, string redirectUri, string clientId, string authorization = null, string scope = null)
        {
            // verify the required parameter 'responseType' is set
            if (responseType == null)
                throw new ApiException(400, "Missing required parameter 'responseType' when calling AuthenticationApi->Authorize");
            // verify the required parameter 'redirectUri' is set
            if (redirectUri == null)
                throw new ApiException(400, "Missing required parameter 'redirectUri' when calling AuthenticationApi->Authorize");
            // verify the required parameter 'clientId' is set
            if (clientId == null)
                throw new ApiException(400, "Missing required parameter 'clientId' when calling AuthenticationApi->Authorize");

            var localVarPath = "/oauth/authorize";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (responseType != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "response_type", responseType)); // query parameter
            if (scope != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "scope", scope)); // query parameter
            if (redirectUri != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "redirect_uri", redirectUri)); // query parameter
            if (clientId != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "client_id", clientId)); // query parameter
            if (authorization != null) localVarHeaderParams.Add("Authorization", Configuration.ApiClient.ParameterToString(authorization)); // header parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("Authorize", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Change password. Change the user&#39;s password.
        /// </summary>
        /// <exception cref="Genesys.Internal.Authentication.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request">request</param>
        /// <param name="authorization">OAuth 2.0 Bearer Token. Example: \&quot;Authorization: bearer a4b5da75-a584-4053-9227-0f0ab23ff06e\&quot;  (optional, default to bearer)</param>
        /// <returns>ApiResponse</returns>
        public ApiResponse ChangePassword (ChangePasswordOperation request, string authorization = null)
        {
             ApiResponse<ApiResponse> localVarResponse = ChangePasswordWithHttpInfo(request, authorization);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Change password. Change the user&#39;s password.
        /// </summary>
        /// <exception cref="Genesys.Internal.Authentication.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request">request</param>
        /// <param name="authorization">OAuth 2.0 Bearer Token. Example: \&quot;Authorization: bearer a4b5da75-a584-4053-9227-0f0ab23ff06e\&quot;  (optional, default to bearer)</param>
        /// <returns>ApiResponse of ApiResponse</returns>
        public ApiResponse< ApiResponse > ChangePasswordWithHttpInfo (ChangePasswordOperation request, string authorization = null)
        {
            // verify the required parameter 'request' is set
            if (request == null)
                throw new ApiException(400, "Missing required parameter 'request' when calling AuthenticationApi->ChangePassword");

            var localVarPath = "/change-password";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (authorization != null) localVarHeaderParams.Add("Authorization", Configuration.ApiClient.ParameterToString(authorization)); // header parameter
            if (request != null && request.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(request); // http body (model) parameter
            }
            else
            {
                localVarPostBody = request; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ChangePassword", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ApiResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ApiResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(ApiResponse)));
        }

        /// <summary>
        /// Change password. Change the user&#39;s password.
        /// </summary>
        /// <exception cref="Genesys.Internal.Authentication.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request">request</param>
        /// <param name="authorization">OAuth 2.0 Bearer Token. Example: \&quot;Authorization: bearer a4b5da75-a584-4053-9227-0f0ab23ff06e\&quot;  (optional, default to bearer)</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse> ChangePasswordAsync (ChangePasswordOperation request, string authorization = null)
        {
             ApiResponse<ApiResponse> localVarResponse = await ChangePasswordAsyncWithHttpInfo(request, authorization);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Change password. Change the user&#39;s password.
        /// </summary>
        /// <exception cref="Genesys.Internal.Authentication.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request">request</param>
        /// <param name="authorization">OAuth 2.0 Bearer Token. Example: \&quot;Authorization: bearer a4b5da75-a584-4053-9227-0f0ab23ff06e\&quot;  (optional, default to bearer)</param>
        /// <returns>Task of ApiResponse (ApiResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ApiResponse>> ChangePasswordAsyncWithHttpInfo (ChangePasswordOperation request, string authorization = null)
        {
            // verify the required parameter 'request' is set
            if (request == null)
                throw new ApiException(400, "Missing required parameter 'request' when calling AuthenticationApi->ChangePassword");

            var localVarPath = "/change-password";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (authorization != null) localVarHeaderParams.Add("Authorization", Configuration.ApiClient.ParameterToString(authorization)); // header parameter
            if (request != null && request.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(request); // http body (model) parameter
            }
            else
            {
                localVarPostBody = request; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ChangePassword", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ApiResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ApiResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(ApiResponse)));
        }

        /// <summary>
        /// Get user information by access token. Get information about a user by their OAuth 2 access token.
        /// </summary>
        /// <exception cref="Genesys.Internal.Authentication.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization">The OAuth 2 bearer access token you received from &#x60;/auth/v3/oauth/token&#x60;. For example: \&quot;Authorization: bearer a4b5da75-a584-4053-9227-0f0ab23ff06e\&quot; </param>
        /// <returns>CloudUserDetails</returns>
        public CloudUserDetails GetInfo (string authorization)
        {
             ApiResponse<CloudUserDetails> localVarResponse = GetInfoWithHttpInfo(authorization);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get user information by access token. Get information about a user by their OAuth 2 access token.
        /// </summary>
        /// <exception cref="Genesys.Internal.Authentication.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization">The OAuth 2 bearer access token you received from &#x60;/auth/v3/oauth/token&#x60;. For example: \&quot;Authorization: bearer a4b5da75-a584-4053-9227-0f0ab23ff06e\&quot; </param>
        /// <returns>ApiResponse of CloudUserDetails</returns>
        public ApiResponse< CloudUserDetails > GetInfoWithHttpInfo (string authorization)
        {
            // verify the required parameter 'authorization' is set
            if (authorization == null)
                throw new ApiException(400, "Missing required parameter 'authorization' when calling AuthenticationApi->GetInfo");

            var localVarPath = "/userinfo";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (authorization != null) localVarHeaderParams.Add("Authorization", Configuration.ApiClient.ParameterToString(authorization)); // header parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetInfo", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<CloudUserDetails>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (CloudUserDetails) Configuration.ApiClient.Deserialize(localVarResponse, typeof(CloudUserDetails)));
        }

        /// <summary>
        /// Get user information by access token. Get information about a user by their OAuth 2 access token.
        /// </summary>
        /// <exception cref="Genesys.Internal.Authentication.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization">The OAuth 2 bearer access token you received from &#x60;/auth/v3/oauth/token&#x60;. For example: \&quot;Authorization: bearer a4b5da75-a584-4053-9227-0f0ab23ff06e\&quot; </param>
        /// <returns>Task of CloudUserDetails</returns>
        public async System.Threading.Tasks.Task<CloudUserDetails> GetInfoAsync (string authorization)
        {
             ApiResponse<CloudUserDetails> localVarResponse = await GetInfoAsyncWithHttpInfo(authorization);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get user information by access token. Get information about a user by their OAuth 2 access token.
        /// </summary>
        /// <exception cref="Genesys.Internal.Authentication.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization">The OAuth 2 bearer access token you received from &#x60;/auth/v3/oauth/token&#x60;. For example: \&quot;Authorization: bearer a4b5da75-a584-4053-9227-0f0ab23ff06e\&quot; </param>
        /// <returns>Task of ApiResponse (CloudUserDetails)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<CloudUserDetails>> GetInfoAsyncWithHttpInfo (string authorization)
        {
            // verify the required parameter 'authorization' is set
            if (authorization == null)
                throw new ApiException(400, "Missing required parameter 'authorization' when calling AuthenticationApi->GetInfo");

            var localVarPath = "/userinfo";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (authorization != null) localVarHeaderParams.Add("Authorization", Configuration.ApiClient.ParameterToString(authorization)); // header parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetInfo", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<CloudUserDetails>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (CloudUserDetails) Configuration.ApiClient.Deserialize(localVarResponse, typeof(CloudUserDetails)));
        }

        /// <summary>
        /// Retrieve access token. Retrieve an access token based on the grant type &amp;mdash; Authorization Code Grant, Resource Owner Password Credentials Grant or Client Credentials Grant. For more information, see [Token Endpoint](https://tools.ietf.org/html/rfc6749). **Note:** For the optional **scope** parameter, the Authentication API supports only the &#39;*&#39; value.
        /// </summary>
        /// <exception cref="Genesys.Internal.Authentication.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="grantType">The grant type you use to implement authentication.</param>
        /// <param name="authorization">Basic authorization. For example: &#39;Authorization: Basic Y3...MQ&#x3D;&#x3D;&#39; (optional)</param>
        /// <param name="accept">The media type the Authentication API should should use for the response. For example: &#39;Accept: application/x-www-form-urlencoded&#39; (optional)</param>
        /// <param name="scope">Scope (optional)</param>
        /// <param name="clientId">The ID of the application or service that is registered as the client. You&#39;ll need to get this value from your PureEngage Cloud representative. (optional)</param>
        /// <param name="refreshToken">See [Refresh Token](https://tools.ietf.org/html/rfc6749#section-1.5) for details. (optional)</param>
        /// <param name="username">The agent&#39;s username. (optional)</param>
        /// <param name="password">The agent&#39;s password (optional)</param>
        /// <returns>DefaultOAuth2AccessToken</returns>
        public DefaultOAuth2AccessToken RetrieveToken (string grantType, string authorization = null, string accept = null, string scope = null, string clientId = null, string refreshToken = null, string username = null, string password = null)
        {
             ApiResponse<DefaultOAuth2AccessToken> localVarResponse = RetrieveTokenWithHttpInfo(grantType, authorization, accept, scope, clientId, refreshToken, username, password);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Retrieve access token. Retrieve an access token based on the grant type &amp;mdash; Authorization Code Grant, Resource Owner Password Credentials Grant or Client Credentials Grant. For more information, see [Token Endpoint](https://tools.ietf.org/html/rfc6749). **Note:** For the optional **scope** parameter, the Authentication API supports only the &#39;*&#39; value.
        /// </summary>
        /// <exception cref="Genesys.Internal.Authentication.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="grantType">The grant type you use to implement authentication.</param>
        /// <param name="authorization">Basic authorization. For example: &#39;Authorization: Basic Y3...MQ&#x3D;&#x3D;&#39; (optional)</param>
        /// <param name="accept">The media type the Authentication API should should use for the response. For example: &#39;Accept: application/x-www-form-urlencoded&#39; (optional)</param>
        /// <param name="scope">Scope (optional)</param>
        /// <param name="clientId">The ID of the application or service that is registered as the client. You&#39;ll need to get this value from your PureEngage Cloud representative. (optional)</param>
        /// <param name="refreshToken">See [Refresh Token](https://tools.ietf.org/html/rfc6749#section-1.5) for details. (optional)</param>
        /// <param name="username">The agent&#39;s username. (optional)</param>
        /// <param name="password">The agent&#39;s password (optional)</param>
        /// <returns>ApiResponse of DefaultOAuth2AccessToken</returns>
        public ApiResponse< DefaultOAuth2AccessToken > RetrieveTokenWithHttpInfo (string grantType, string authorization = null, string accept = null, string scope = null, string clientId = null, string refreshToken = null, string username = null, string password = null)
        {
            // verify the required parameter 'grantType' is set
            if (grantType == null)
                throw new ApiException(400, "Missing required parameter 'grantType' when calling AuthenticationApi->RetrieveToken");

            var localVarPath = "/oauth/token";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (authorization != null) localVarHeaderParams.Add("Authorization", Configuration.ApiClient.ParameterToString(authorization)); // header parameter
            if (accept != null) localVarHeaderParams.Add("Accept", Configuration.ApiClient.ParameterToString(accept)); // header parameter
            if (grantType != null) localVarFormParams.Add("grant_type", Configuration.ApiClient.ParameterToString(grantType)); // form parameter
            if (scope != null) localVarFormParams.Add("scope", Configuration.ApiClient.ParameterToString(scope)); // form parameter
            if (clientId != null) localVarFormParams.Add("client_id", Configuration.ApiClient.ParameterToString(clientId)); // form parameter
            if (refreshToken != null) localVarFormParams.Add("refresh_token", Configuration.ApiClient.ParameterToString(refreshToken)); // form parameter
            if (username != null) localVarFormParams.Add("username", Configuration.ApiClient.ParameterToString(username)); // form parameter
            if (password != null) localVarFormParams.Add("password", Configuration.ApiClient.ParameterToString(password)); // form parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("RetrieveToken", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<DefaultOAuth2AccessToken>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (DefaultOAuth2AccessToken) Configuration.ApiClient.Deserialize(localVarResponse, typeof(DefaultOAuth2AccessToken)));
        }

        /// <summary>
        /// Retrieve access token. Retrieve an access token based on the grant type &amp;mdash; Authorization Code Grant, Resource Owner Password Credentials Grant or Client Credentials Grant. For more information, see [Token Endpoint](https://tools.ietf.org/html/rfc6749). **Note:** For the optional **scope** parameter, the Authentication API supports only the &#39;*&#39; value.
        /// </summary>
        /// <exception cref="Genesys.Internal.Authentication.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="grantType">The grant type you use to implement authentication.</param>
        /// <param name="authorization">Basic authorization. For example: &#39;Authorization: Basic Y3...MQ&#x3D;&#x3D;&#39; (optional)</param>
        /// <param name="accept">The media type the Authentication API should should use for the response. For example: &#39;Accept: application/x-www-form-urlencoded&#39; (optional)</param>
        /// <param name="scope">Scope (optional)</param>
        /// <param name="clientId">The ID of the application or service that is registered as the client. You&#39;ll need to get this value from your PureEngage Cloud representative. (optional)</param>
        /// <param name="refreshToken">See [Refresh Token](https://tools.ietf.org/html/rfc6749#section-1.5) for details. (optional)</param>
        /// <param name="username">The agent&#39;s username. (optional)</param>
        /// <param name="password">The agent&#39;s password (optional)</param>
        /// <returns>Task of DefaultOAuth2AccessToken</returns>
        public async System.Threading.Tasks.Task<DefaultOAuth2AccessToken> RetrieveTokenAsync (string grantType, string authorization = null, string accept = null, string scope = null, string clientId = null, string refreshToken = null, string username = null, string password = null)
        {
             ApiResponse<DefaultOAuth2AccessToken> localVarResponse = await RetrieveTokenAsyncWithHttpInfo(grantType, authorization, accept, scope, clientId, refreshToken, username, password);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Retrieve access token. Retrieve an access token based on the grant type &amp;mdash; Authorization Code Grant, Resource Owner Password Credentials Grant or Client Credentials Grant. For more information, see [Token Endpoint](https://tools.ietf.org/html/rfc6749). **Note:** For the optional **scope** parameter, the Authentication API supports only the &#39;*&#39; value.
        /// </summary>
        /// <exception cref="Genesys.Internal.Authentication.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="grantType">The grant type you use to implement authentication.</param>
        /// <param name="authorization">Basic authorization. For example: &#39;Authorization: Basic Y3...MQ&#x3D;&#x3D;&#39; (optional)</param>
        /// <param name="accept">The media type the Authentication API should should use for the response. For example: &#39;Accept: application/x-www-form-urlencoded&#39; (optional)</param>
        /// <param name="scope">Scope (optional)</param>
        /// <param name="clientId">The ID of the application or service that is registered as the client. You&#39;ll need to get this value from your PureEngage Cloud representative. (optional)</param>
        /// <param name="refreshToken">See [Refresh Token](https://tools.ietf.org/html/rfc6749#section-1.5) for details. (optional)</param>
        /// <param name="username">The agent&#39;s username. (optional)</param>
        /// <param name="password">The agent&#39;s password (optional)</param>
        /// <returns>Task of ApiResponse (DefaultOAuth2AccessToken)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<DefaultOAuth2AccessToken>> RetrieveTokenAsyncWithHttpInfo (string grantType, string authorization = null, string accept = null, string scope = null, string clientId = null, string refreshToken = null, string username = null, string password = null)
        {
            // verify the required parameter 'grantType' is set
            if (grantType == null)
                throw new ApiException(400, "Missing required parameter 'grantType' when calling AuthenticationApi->RetrieveToken");

            var localVarPath = "/oauth/token";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (authorization != null) localVarHeaderParams.Add("Authorization", Configuration.ApiClient.ParameterToString(authorization)); // header parameter
            if (accept != null) localVarHeaderParams.Add("Accept", Configuration.ApiClient.ParameterToString(accept)); // header parameter
            if (grantType != null) localVarFormParams.Add("grant_type", Configuration.ApiClient.ParameterToString(grantType)); // form parameter
            if (scope != null) localVarFormParams.Add("scope", Configuration.ApiClient.ParameterToString(scope)); // form parameter
            if (clientId != null) localVarFormParams.Add("client_id", Configuration.ApiClient.ParameterToString(clientId)); // form parameter
            if (refreshToken != null) localVarFormParams.Add("refresh_token", Configuration.ApiClient.ParameterToString(refreshToken)); // form parameter
            if (username != null) localVarFormParams.Add("username", Configuration.ApiClient.ParameterToString(username)); // form parameter
            if (password != null) localVarFormParams.Add("password", Configuration.ApiClient.ParameterToString(password)); // form parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("RetrieveToken", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<DefaultOAuth2AccessToken>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (DefaultOAuth2AccessToken) Configuration.ApiClient.Deserialize(localVarResponse, typeof(DefaultOAuth2AccessToken)));
        }

        /// <summary>
        /// Perform form-based authentication. Perform form-based authentication by submitting an agent&#39;s username and password.
        /// </summary>
        /// <exception cref="Genesys.Internal.Authentication.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="username">The agent&#39;s username, formatted as &#39;tenant\\username&#39;.</param>
        /// <param name="password">The agent&#39;s password.</param>
        /// <param name="saml">Specifies whether to login using [Security Assertion Markup Language](https://en.wikipedia.org/wiki/Security_Assertion_Markup_Language) (SAML). (optional)</param>
        /// <returns></returns>
        public void SignIn (string username, string password, bool? saml = null)
        {
             SignInWithHttpInfo(username, password, saml);
        }

        /// <summary>
        /// Perform form-based authentication. Perform form-based authentication by submitting an agent&#39;s username and password.
        /// </summary>
        /// <exception cref="Genesys.Internal.Authentication.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="username">The agent&#39;s username, formatted as &#39;tenant\\username&#39;.</param>
        /// <param name="password">The agent&#39;s password.</param>
        /// <param name="saml">Specifies whether to login using [Security Assertion Markup Language](https://en.wikipedia.org/wiki/Security_Assertion_Markup_Language) (SAML). (optional)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> SignInWithHttpInfo (string username, string password, bool? saml = null)
        {
            // verify the required parameter 'username' is set
            if (username == null)
                throw new ApiException(400, "Missing required parameter 'username' when calling AuthenticationApi->SignIn");
            // verify the required parameter 'password' is set
            if (password == null)
                throw new ApiException(400, "Missing required parameter 'password' when calling AuthenticationApi->SignIn");

            var localVarPath = "/sign-in";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (username != null) localVarFormParams.Add("username", Configuration.ApiClient.ParameterToString(username)); // form parameter
            if (password != null) localVarFormParams.Add("password", Configuration.ApiClient.ParameterToString(password)); // form parameter
            if (saml != null) localVarFormParams.Add("saml", Configuration.ApiClient.ParameterToString(saml)); // form parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("SignIn", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Perform form-based authentication. Perform form-based authentication by submitting an agent&#39;s username and password.
        /// </summary>
        /// <exception cref="Genesys.Internal.Authentication.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="username">The agent&#39;s username, formatted as &#39;tenant\\username&#39;.</param>
        /// <param name="password">The agent&#39;s password.</param>
        /// <param name="saml">Specifies whether to login using [Security Assertion Markup Language](https://en.wikipedia.org/wiki/Security_Assertion_Markup_Language) (SAML). (optional)</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task SignInAsync (string username, string password, bool? saml = null)
        {
             await SignInAsyncWithHttpInfo(username, password, saml);

        }

        /// <summary>
        /// Perform form-based authentication. Perform form-based authentication by submitting an agent&#39;s username and password.
        /// </summary>
        /// <exception cref="Genesys.Internal.Authentication.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="username">The agent&#39;s username, formatted as &#39;tenant\\username&#39;.</param>
        /// <param name="password">The agent&#39;s password.</param>
        /// <param name="saml">Specifies whether to login using [Security Assertion Markup Language](https://en.wikipedia.org/wiki/Security_Assertion_Markup_Language) (SAML). (optional)</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> SignInAsyncWithHttpInfo (string username, string password, bool? saml = null)
        {
            // verify the required parameter 'username' is set
            if (username == null)
                throw new ApiException(400, "Missing required parameter 'username' when calling AuthenticationApi->SignIn");
            // verify the required parameter 'password' is set
            if (password == null)
                throw new ApiException(400, "Missing required parameter 'password' when calling AuthenticationApi->SignIn");

            var localVarPath = "/sign-in";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (username != null) localVarFormParams.Add("username", Configuration.ApiClient.ParameterToString(username)); // form parameter
            if (password != null) localVarFormParams.Add("password", Configuration.ApiClient.ParameterToString(password)); // form parameter
            if (saml != null) localVarFormParams.Add("saml", Configuration.ApiClient.ParameterToString(saml)); // form parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("SignIn", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Sign-out a logged in user. Sign-out the current user and invalidate either the current token or all tokens associated with the user.
        /// </summary>
        /// <exception cref="Genesys.Internal.Authentication.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization">The OAuth 2 bearer access token you received from &#x60;/auth/v3/oauth/token&#x60;. For example: \&quot;Authorization: bearer a4b5da75-a584-4053-9227-0f0ab23ff06e\&quot; </param>
        /// <param name="global">Specifies whether to invalidate all tokens for the current user (&#x60;true&#x60;) or only the current token (&#x60;false&#x60;). (optional)</param>
        /// <returns>ApiResponse</returns>
        public ApiResponse SignOut (string authorization, bool? global = null)
        {
             ApiResponse<ApiResponse> localVarResponse = SignOutWithHttpInfo(authorization, global);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Sign-out a logged in user. Sign-out the current user and invalidate either the current token or all tokens associated with the user.
        /// </summary>
        /// <exception cref="Genesys.Internal.Authentication.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization">The OAuth 2 bearer access token you received from &#x60;/auth/v3/oauth/token&#x60;. For example: \&quot;Authorization: bearer a4b5da75-a584-4053-9227-0f0ab23ff06e\&quot; </param>
        /// <param name="global">Specifies whether to invalidate all tokens for the current user (&#x60;true&#x60;) or only the current token (&#x60;false&#x60;). (optional)</param>
        /// <returns>ApiResponse of ApiResponse</returns>
        public ApiResponse< ApiResponse > SignOutWithHttpInfo (string authorization, bool? global = null)
        {
            // verify the required parameter 'authorization' is set
            if (authorization == null)
                throw new ApiException(400, "Missing required parameter 'authorization' when calling AuthenticationApi->SignOut");

            var localVarPath = "/sign-out";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (global != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "global", global)); // query parameter
            if (authorization != null) localVarHeaderParams.Add("Authorization", Configuration.ApiClient.ParameterToString(authorization)); // header parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("SignOut", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ApiResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ApiResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(ApiResponse)));
        }

        /// <summary>
        /// Sign-out a logged in user. Sign-out the current user and invalidate either the current token or all tokens associated with the user.
        /// </summary>
        /// <exception cref="Genesys.Internal.Authentication.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization">The OAuth 2 bearer access token you received from &#x60;/auth/v3/oauth/token&#x60;. For example: \&quot;Authorization: bearer a4b5da75-a584-4053-9227-0f0ab23ff06e\&quot; </param>
        /// <param name="global">Specifies whether to invalidate all tokens for the current user (&#x60;true&#x60;) or only the current token (&#x60;false&#x60;). (optional)</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse> SignOutAsync (string authorization, bool? global = null)
        {
             ApiResponse<ApiResponse> localVarResponse = await SignOutAsyncWithHttpInfo(authorization, global);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Sign-out a logged in user. Sign-out the current user and invalidate either the current token or all tokens associated with the user.
        /// </summary>
        /// <exception cref="Genesys.Internal.Authentication.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization">The OAuth 2 bearer access token you received from &#x60;/auth/v3/oauth/token&#x60;. For example: \&quot;Authorization: bearer a4b5da75-a584-4053-9227-0f0ab23ff06e\&quot; </param>
        /// <param name="global">Specifies whether to invalidate all tokens for the current user (&#x60;true&#x60;) or only the current token (&#x60;false&#x60;). (optional)</param>
        /// <returns>Task of ApiResponse (ApiResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ApiResponse>> SignOutAsyncWithHttpInfo (string authorization, bool? global = null)
        {
            // verify the required parameter 'authorization' is set
            if (authorization == null)
                throw new ApiException(400, "Missing required parameter 'authorization' when calling AuthenticationApi->SignOut");

            var localVarPath = "/sign-out";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (global != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "global", global)); // query parameter
            if (authorization != null) localVarHeaderParams.Add("Authorization", Configuration.ApiClient.ParameterToString(authorization)); // header parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("SignOut", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ApiResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ApiResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(ApiResponse)));
        }

        /// <summary>
        /// Sign-out a logged in user. Sign-out the current user and invalidate either the current token or all tokens associated with the user.
        /// </summary>
        /// <exception cref="Genesys.Internal.Authentication.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization">The OAuth 2 bearer access token you received from &#x60;/auth/v3/oauth/token&#x60;. For example: \&quot;Authorization: bearer a4b5da75-a584-4053-9227-0f0ab23ff06e\&quot; </param>
        /// <param name="global">Specifies whether to invalidate all tokens for the current user (&#x60;true&#x60;) or only the current token (&#x60;false&#x60;). (optional)</param>
        /// <param name="redirectUri">Specifies URI where browser will be redirected after successful sign-out (optional)</param>
        /// <returns>ApiResponse</returns>
        public ApiResponse SignOut1 (string authorization, bool? global = null, string redirectUri = null)
        {
             ApiResponse<ApiResponse> localVarResponse = SignOut1WithHttpInfo(authorization, global, redirectUri);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Sign-out a logged in user. Sign-out the current user and invalidate either the current token or all tokens associated with the user.
        /// </summary>
        /// <exception cref="Genesys.Internal.Authentication.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization">The OAuth 2 bearer access token you received from &#x60;/auth/v3/oauth/token&#x60;. For example: \&quot;Authorization: bearer a4b5da75-a584-4053-9227-0f0ab23ff06e\&quot; </param>
        /// <param name="global">Specifies whether to invalidate all tokens for the current user (&#x60;true&#x60;) or only the current token (&#x60;false&#x60;). (optional)</param>
        /// <param name="redirectUri">Specifies URI where browser will be redirected after successful sign-out (optional)</param>
        /// <returns>ApiResponse of ApiResponse</returns>
        public ApiResponse< ApiResponse > SignOut1WithHttpInfo (string authorization, bool? global = null, string redirectUri = null)
        {
            // verify the required parameter 'authorization' is set
            if (authorization == null)
                throw new ApiException(400, "Missing required parameter 'authorization' when calling AuthenticationApi->SignOut1");

            var localVarPath = "/sign-out";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (global != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "global", global)); // query parameter
            if (redirectUri != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "redirectUri", redirectUri)); // query parameter
            if (authorization != null) localVarHeaderParams.Add("Authorization", Configuration.ApiClient.ParameterToString(authorization)); // header parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("SignOut1", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ApiResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ApiResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(ApiResponse)));
        }

        /// <summary>
        /// Sign-out a logged in user. Sign-out the current user and invalidate either the current token or all tokens associated with the user.
        /// </summary>
        /// <exception cref="Genesys.Internal.Authentication.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization">The OAuth 2 bearer access token you received from &#x60;/auth/v3/oauth/token&#x60;. For example: \&quot;Authorization: bearer a4b5da75-a584-4053-9227-0f0ab23ff06e\&quot; </param>
        /// <param name="global">Specifies whether to invalidate all tokens for the current user (&#x60;true&#x60;) or only the current token (&#x60;false&#x60;). (optional)</param>
        /// <param name="redirectUri">Specifies URI where browser will be redirected after successful sign-out (optional)</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse> SignOut1Async (string authorization, bool? global = null, string redirectUri = null)
        {
             ApiResponse<ApiResponse> localVarResponse = await SignOut1AsyncWithHttpInfo(authorization, global, redirectUri);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Sign-out a logged in user. Sign-out the current user and invalidate either the current token or all tokens associated with the user.
        /// </summary>
        /// <exception cref="Genesys.Internal.Authentication.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization">The OAuth 2 bearer access token you received from &#x60;/auth/v3/oauth/token&#x60;. For example: \&quot;Authorization: bearer a4b5da75-a584-4053-9227-0f0ab23ff06e\&quot; </param>
        /// <param name="global">Specifies whether to invalidate all tokens for the current user (&#x60;true&#x60;) or only the current token (&#x60;false&#x60;). (optional)</param>
        /// <param name="redirectUri">Specifies URI where browser will be redirected after successful sign-out (optional)</param>
        /// <returns>Task of ApiResponse (ApiResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ApiResponse>> SignOut1AsyncWithHttpInfo (string authorization, bool? global = null, string redirectUri = null)
        {
            // verify the required parameter 'authorization' is set
            if (authorization == null)
                throw new ApiException(400, "Missing required parameter 'authorization' when calling AuthenticationApi->SignOut1");

            var localVarPath = "/sign-out";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (global != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "global", global)); // query parameter
            if (redirectUri != null) localVarQueryParams.AddRange(Configuration.ApiClient.ParameterToKeyValuePairs("", "redirectUri", redirectUri)); // query parameter
            if (authorization != null) localVarHeaderParams.Add("Authorization", Configuration.ApiClient.ParameterToString(authorization)); // header parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("SignOut1", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ApiResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ApiResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(ApiResponse)));
        }

        /// <summary>
        /// Get authentication scheme. Get the authentication scheme by user name or tenant name. The return value is   &#39;saml&#39; if the contact center has [Security Assertion Markup Language](https://en.wikipedia.org/wiki/Security_Assertion_Markup_Language)   (SAML) enabled; otherwise, the return value is &#39;basic&#39;.
        /// </summary>
        /// <exception cref="Genesys.Internal.Authentication.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="lookupData">Data for scheme lookup. (optional)</param>
        /// <returns>ApiResponse</returns>
        public ApiResponse TenantInfo (AuthSchemeLookupData lookupData = null)
        {
             ApiResponse<ApiResponse> localVarResponse = TenantInfoWithHttpInfo(lookupData);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get authentication scheme. Get the authentication scheme by user name or tenant name. The return value is   &#39;saml&#39; if the contact center has [Security Assertion Markup Language](https://en.wikipedia.org/wiki/Security_Assertion_Markup_Language)   (SAML) enabled; otherwise, the return value is &#39;basic&#39;.
        /// </summary>
        /// <exception cref="Genesys.Internal.Authentication.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="lookupData">Data for scheme lookup. (optional)</param>
        /// <returns>ApiResponse of ApiResponse</returns>
        public ApiResponse< ApiResponse > TenantInfoWithHttpInfo (AuthSchemeLookupData lookupData = null)
        {

            var localVarPath = "/auth-scheme";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (lookupData != null && lookupData.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(lookupData); // http body (model) parameter
            }
            else
            {
                localVarPostBody = lookupData; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("TenantInfo", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ApiResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ApiResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(ApiResponse)));
        }

        /// <summary>
        /// Get authentication scheme. Get the authentication scheme by user name or tenant name. The return value is   &#39;saml&#39; if the contact center has [Security Assertion Markup Language](https://en.wikipedia.org/wiki/Security_Assertion_Markup_Language)   (SAML) enabled; otherwise, the return value is &#39;basic&#39;.
        /// </summary>
        /// <exception cref="Genesys.Internal.Authentication.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="lookupData">Data for scheme lookup. (optional)</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse> TenantInfoAsync (AuthSchemeLookupData lookupData = null)
        {
             ApiResponse<ApiResponse> localVarResponse = await TenantInfoAsyncWithHttpInfo(lookupData);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get authentication scheme. Get the authentication scheme by user name or tenant name. The return value is   &#39;saml&#39; if the contact center has [Security Assertion Markup Language](https://en.wikipedia.org/wiki/Security_Assertion_Markup_Language)   (SAML) enabled; otherwise, the return value is &#39;basic&#39;.
        /// </summary>
        /// <exception cref="Genesys.Internal.Authentication.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="lookupData">Data for scheme lookup. (optional)</param>
        /// <returns>Task of ApiResponse (ApiResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ApiResponse>> TenantInfoAsyncWithHttpInfo (AuthSchemeLookupData lookupData = null)
        {

            var localVarPath = "/auth-scheme";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (lookupData != null && lookupData.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(lookupData); // http body (model) parameter
            }
            else
            {
                localVarPostBody = lookupData; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("TenantInfo", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ApiResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ApiResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(ApiResponse)));
        }

    }
}
